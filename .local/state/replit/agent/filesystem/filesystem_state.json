{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Solar Installation Calculator\n\n## Overview\n\nA modern web application for calculating solar installation requirements and costs. The application provides an interactive interface for users to select grid types (single-phase vs three-phase), installation types (on-grid, off-grid, hybrid), and configure their solar energy system based on their specific needs and power usage requirements.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **React with TypeScript**: Modern component-based architecture using functional components and hooks\n- **Vite Build System**: Fast development server and optimized production builds with hot module replacement\n- **shadcn/ui Component Library**: Comprehensive UI component system built on Radix UI primitives with Tailwind CSS styling\n- **Routing**: Client-side routing implemented with Wouter for lightweight navigation\n- **State Management**: React Query (TanStack Query) for server state management with built-in caching, background updates, and error handling\n- **Form Handling**: React Hook Form with Zod validation for type-safe form management\n- **Styling**: Tailwind CSS with CSS variables for theming and responsive design\n\n### Backend Architecture\n- **Express.js Server**: RESTful API server with middleware for JSON parsing, CORS, and request logging\n- **TypeScript**: Full type safety across the entire backend codebase\n- **Modular Route System**: Centralized route registration with separation of concerns\n- **Error Handling**: Global error middleware with proper HTTP status codes and JSON responses\n- **Development Hot Reload**: tsx for TypeScript execution in development with automatic restarts\n\n### Data Storage Solutions\n- **Database**: PostgreSQL with Drizzle ORM for type-safe database operations\n- **Schema Management**: Centralized schema definitions in shared directory for frontend/backend consistency\n- **Migrations**: Drizzle Kit for database schema migrations and version control\n- **Connection**: Neon serverless PostgreSQL for cloud database hosting\n- **Development Storage**: In-memory storage implementation for development and testing\n\n### Authentication and Authorization\n- **Session Management**: PostgreSQL session store using connect-pg-simple for persistent sessions\n- **User Schema**: Basic user authentication with username/password stored securely\n- **Type Safety**: Zod schemas for request validation and type inference\n\n### Build and Deployment\n- **Production Build**: Vite for frontend bundling, esbuild for backend compilation\n- **Static Asset Serving**: Express static file serving for production builds\n- **Environment Configuration**: Environment-specific configurations for development and production\n- **Code Quality**: TypeScript strict mode with comprehensive type checking\n\n## External Dependencies\n\n### Database Services\n- **Neon Database**: Serverless PostgreSQL database hosting with connection pooling\n- **Drizzle ORM**: Type-safe database toolkit with automatic schema generation\n- **PostgreSQL**: Primary database for user data and application state\n\n### UI and Styling\n- **Radix UI**: Accessible, unstyled UI primitives for complex components\n- **Tailwind CSS**: Utility-first CSS framework for responsive design\n- **Lucide React**: Icon library with consistent SVG icons\n- **shadcn/ui**: Pre-built component system combining Radix UI and Tailwind CSS\n\n### Development Tools\n- **Vite**: Build tool with fast HMR and optimized production builds\n- **TypeScript**: Static type checking and enhanced developer experience\n- **PostCSS**: CSS processing with Tailwind CSS and Autoprefixer plugins\n- **ESBuild**: Fast JavaScript/TypeScript bundler for production builds\n\n### Utility Libraries\n- **TanStack React Query**: Server state management with caching and synchronization\n- **React Hook Form**: Performant forms with easy validation\n- **Zod**: TypeScript-first schema validation library\n- **date-fns**: Modern JavaScript date utility library\n- **clsx**: Utility for conditionally joining CSS class names","size_bytes":4083},"tailwind.config.ts":{"content":"module.exports = {\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\",\n    \"./src/**/*.{html,js,ts,jsx,tsx}\",\n    \"app/**/*.{ts,tsx}\",\n    \"components/**/*.{ts,tsx}\",\n  ],\n  theme: {\n    extend: {\n      colors: {\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n      },\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      fontFamily: {\n        sans: [\n          \"ui-sans-serif\",\n          \"system-ui\",\n          \"sans-serif\",\n          '\"Apple Color Emoji\"',\n          '\"Segoe UI Emoji\"',\n          '\"Segoe UI Symbol\"',\n          '\"Noto Color Emoji\"',\n        ],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n    container: { center: true, padding: \"2rem\", screens: { \"2xl\": \"1400px\" } },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n  darkMode: [\"class\"],\n};\n","size_bytes":2379},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"â€¦\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on port 5000\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = 5000;\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":1921},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // put application routes here\n  // prefix all routes with /api\n\n  // use storage to perform CRUD operations on the storage interface\n  // e.g. storage.insertUser(user) or storage.getUserByUsername(username)\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":473},"server/storage.ts":{"content":"import { users, type User, type InsertUser } from \"@shared/schema\";\n\n// modify the interface with any CRUD methods\n// you might need\n\nexport interface IStorage {\n  getUser(id: number): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<number, User>;\n  currentId: number;\n\n  constructor() {\n    this.users = new Map();\n    this.currentId = 1;\n  }\n\n  async getUser(id: number): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = this.currentId++;\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":1012},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2254},"shared/schema.ts":{"content":"import { pgTable, text, serial, integer, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n","size_bytes":533},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport NotFound from \"@/pages/not-found\";\n\nimport { Land } from \"@/pages/Land\";\n\nfunction Router() {\n  return (\n    <Switch>\n      {/* Add pages below */}\n      <Route path=\"/\" component={Land} />\n      {/* Fallback to 404 */}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":764},"client/src/index.css":{"content":"@tailwind components;\n@tailwind utilities;\n\n@layer components {\n  .all-\\[unset\\] {\n    all: unset;\n  }\n}\n\n:root {\n  --animate-spin: spin 1s linear infinite;\n}\n\n.animate-fade-in {\n  animation: fade-in 1s var(--animation-delay, 0s) ease forwards;\n}\n\n.animate-fade-up {\n  animation: fade-up 1s var(--animation-delay, 0s) ease forwards;\n}\n\n.animate-marquee {\n  animation: marquee var(--duration) infinite linear;\n}\n\n.animate-marquee-vertical {\n  animation: marquee-vertical var(--duration) linear infinite;\n}\n\n.animate-shimmer {\n  animation: shimmer 8s infinite;\n}\n\n.animate-spin {\n  animation: var(--animate-spin);\n}\n\n@keyframes spin {\n  to {\n    transform: rotate(1turn);\n  }\n}\n\n@keyframes image-glow {\n  0% {\n    opacity: 0;\n    animation-timing-function: cubic-bezier(0.74, 0.25, 0.76, 1);\n  }\n\n  10% {\n    opacity: 0.7;\n    animation-timing-function: cubic-bezier(0.12, 0.01, 0.08, 0.99);\n  }\n\n  to {\n    opacity: 0.4;\n  }\n}\n\n@keyframes fade-in {\n  0% {\n    opacity: 0;\n    transform: translateY(-10px);\n  }\n\n  to {\n    opacity: 1;\n    transform: none;\n  }\n}\n\n@keyframes fade-up {\n  0% {\n    opacity: 0;\n    transform: translateY(20px);\n  }\n\n  to {\n    opacity: 1;\n    transform: none;\n  }\n}\n\n@keyframes shimmer {\n  0%,\n  90%,\n  to {\n    background-position: calc(-100% - var(--shimmer-width)) 0;\n  }\n\n  30%,\n  60% {\n    background-position: calc(100% + var(--shimmer-width)) 0;\n  }\n}\n\n@keyframes marquee {\n  0% {\n    transform: translate(0);\n  }\n\n  to {\n    transform: translateX(calc(-100% - var(--gap)));\n  }\n}\n\n@keyframes marquee-vertical {\n  0% {\n    transform: translateY(0);\n  }\n\n  to {\n    transform: translateY(calc(-100% - var(--gap)));\n  }\n}\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  :root {\n    --background: 0 0% 100%;\n    --foreground: 222.2 47.4% 11.2%;\n\n    --muted: 210 40% 96.1%;\n    --muted-foreground: 215.4 16.3% 46.9%;\n\n    --popover: 0 0% 100%;\n    --popover-foreground: 222.2 47.4% 11.2%;\n\n    --border: 214.3 31.8% 91.4%;\n    --input: 214.3 31.8% 91.4%;\n\n    --card: transparent;\n    --card-foreground: 222.2 47.4% 11.2%;\n\n    --primary: 222.2 47.4% 11.2%;\n    --primary-foreground: 210 40% 98%;\n\n    --secondary: 210 40% 96.1%;\n    --secondary-foreground: 222.2 47.4% 11.2%;\n\n    --accent: 210 40% 96.1%;\n    --accent-foreground: 222.2 47.4% 11.2%;\n\n    --destructive: 0 100% 50%;\n    --destructive-foreground: 210 40% 98%;\n\n    --ring: 215 20.2% 65.1%;\n\n    --radius: 0.5rem;\n  }\n\n  .dark {\n    --background: 224 71% 4%;\n    --foreground: 213 31% 91%;\n\n    --muted: 223 47% 11%;\n    --muted-foreground: 215.4 16.3% 56.9%;\n\n    --accent: 216 34% 17%;\n    --accent-foreground: 210 40% 98%;\n\n    --popover: 224 71% 4%;\n    --popover-foreground: 215 20.2% 65.1%;\n\n    --border: 216 34% 17%;\n    --input: 216 34% 17%;\n\n    --card: transparent;\n    --card-foreground: 213 31% 91%;\n\n    --primary: 210 40% 98%;\n    --primary-foreground: 222.2 47.4% 1.2%;\n\n    --secondary: 222.2 47.4% 11.2%;\n    --secondary-foreground: 210 40% 98%;\n\n    --destructive: 0 63% 31%;\n    --destructive-foreground: 210 40% 98%;\n\n    --ring: 216 34% 17%;\n\n    --radius: 0.5rem;\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply bg-background text-foreground;\n    font-feature-settings: \"rlig\" 1, \"calt\" 1;\n  }\n}\n","size_bytes":3274},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey[0] as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1376},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/Land.tsx":{"content":"import React, { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { MobileWizard } from \"@/components/mobile-wizard/MobileWizard\";\nimport { DesktopSolarInterface } from \"@/components/DesktopSolarInterface\";\nimport { ContactFooterSection } from \"@/components/mobile-wizard/ContactFooterSection\";\n\nexport const Land = (): JSX.Element => {\n  const [selectedGridType, setSelectedGridType] = useState(\"three-phase\");\n  const [selectedInstallationType, setSelectedInstallationType] =\n    useState(\"ongrid\");\n  \n  // Multi-step form state\n  const [currentStep, setCurrentStep] = useState(\"initial\"); // initial, hero, steps, calculator, results, personal, property, energy\n  const [electricBill, setElectricBill] = useState(\"\");\n  \n  // Mobile menu state\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n  const [selectedProcessStep, setSelectedProcessStep] = useState(0); // For tracking clicked process step\n  const [formData, setFormData] = useState({\n    fullName: \"\",\n    phoneNumber: \"\",\n    homeAddress: \"\",\n    propertyType: \"\",\n    humidityIndex: \"\",\n    sunlightExposure: \"\",\n    storageMode: \"\",\n    maintenanceService: \"\",\n    backupHours: \"\"\n  });\n\n  // Handle calculate button click\n  const handleCalculate = () => {\n    if (!electricBill || electricBill.trim() === \"\" || parseFloat(electricBill) <= 0) {\n      alert(\"Please enter a valid electric bill amount before calculating.\");\n      return;\n    }\n    // Navigate to desktop calculator interface\n    setCurrentStep(\"desktopWizard\");\n  };\n\n  // Mobile Hero Section Component\n  const MobileHeroPage = () => (\n    <div className=\"md:hidden w-full h-screen bg-gradient-to-b from-[#0a1f26] via-[#1a2b33] to-[#06141b] relative overflow-hidden\">\n      {/* Background image/illustration */}\n      <div className=\"absolute inset-0 bg-[url('/figmaAssets/house-night.jpg')] bg-cover bg-center opacity-40\"></div>\n      <div className=\"absolute inset-0 bg-gradient-to-b from-transparent via-[#0a1f26]/60 to-[#06141b]\"></div>\n      \n      {/* Content */}\n      <div className=\"relative z-10 flex flex-col h-full justify-center items-center px-6 text-center\">\n        <h1 className=\"text-white text-3xl font-bold mb-4 leading-tight\">\n          Power Your Home,<br />Save Money\n        </h1>\n        <p className=\"text-gray-300 text-base mb-8 max-w-sm leading-relaxed\">\n          Whether you goal is to invest in your home or to completely transform your energy consumption,<br />\n          eaneer can help make that happen.\n        </p>\n        \n        <Button\n          onClick={() => setCurrentStep(\"steps\")}\n          className=\"bg-white text-black px-8 py-4 rounded-full hover:bg-gray-100 font-semibold text-base flex items-center gap-2\"\n          data-testid=\"button-ready-to-save\"\n        >\n          Ready To Save Energy?\n          <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" className=\"text-black\">\n            <path d=\"M13 2L3 14h9l-1 8 10-12h-9l1-8z\" fill=\"currentColor\"/>\n          </svg>\n        </Button>\n      </div>\n      \n      <ContactFooterSection />\n    </div>\n  );\n\n  // Mobile Steps Section Component  \n  const MobileStepsPage = () => (\n    <div className=\"md:hidden w-full min-h-screen bg-gradient-to-b from-[#06141b] via-[#0a1f26] to-[#06141b] relative\">\n      <div className=\"px-6 py-12\">\n        {/* Header */}\n        <div className=\"text-center mb-12\">\n          <p className=\"text-gray-400 text-sm mb-4\">How Do I Get Started?</p>\n          <h1 className=\"text-white text-2xl font-bold mb-2\">\n            Explore <span className=\"text-cyan-400\">eaneer Energetics</span> Solar Energy Installations\n          </h1>\n        </div>\n\n        {/* Steps Cards */}\n        <div className=\"space-y-6 mb-12\">\n          <div className=\"bg-[#1a2b33]/80 backdrop-blur-sm rounded-2xl p-6 border border-gray-700/30\">\n            <h3 className=\"text-white text-lg font-semibold mb-3\">Answer Our Questions</h3>\n            <p className=\"text-gray-400 text-sm leading-relaxed\">\n              Answer A Few Questions Online To Get A Price Guide. Our Installer In Your Area Will Then Contact You To Book In A Personalised Survey.\n            </p>\n          </div>\n\n          <div className=\"bg-[#1a2b33]/80 backdrop-blur-sm rounded-2xl p-6 border border-gray-700/30\">\n            <h3 className=\"text-white text-lg font-semibold mb-3\">Get Your Quote</h3>\n            <p className=\"text-gray-400 text-sm leading-relaxed\">\n              Why The Energy Won't Work On Our System? We Build You And Your Business a custom solution.\n            </p>\n          </div>\n\n          <div className=\"bg-[#1a2b33]/80 backdrop-blur-sm rounded-2xl p-6 border border-gray-700/30\">\n            <h3 className=\"text-white text-lg font-semibold mb-3\">Book Your Installation</h3>\n            <p className=\"text-gray-400 text-sm leading-relaxed\">\n              Book time with Us, So You Can Install Your Personalised Solar System. You can Receive and install immediately.\n            </p>\n          </div>\n        </div>\n\n        {/* CTA Button */}\n        <div className=\"text-center\">\n          <Button\n            onClick={() => setCurrentStep(\"calculator\")}\n            className=\"bg-white text-black px-8 py-4 rounded-full hover:bg-gray-100 font-semibold text-base flex items-center gap-2 mx-auto\"\n            data-testid=\"button-ready-to-save-energy\"\n          >\n            Ready To Save Energy?\n            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" className=\"text-black\">\n              <path d=\"M13 2L3 14h9l-1 8 10-12h-9l1-8z\" fill=\"currentColor\"/>\n            </svg>\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n\n  // Navigation functions\n  const goToNextStep = () => {\n    if (currentStep === \"results\") setCurrentStep(\"personal\");\n    else if (currentStep === \"personal\") setCurrentStep(\"property\");\n    else if (currentStep === \"property\") setCurrentStep(\"energy\");\n  };\n\n  const goToPreviousStep = () => {\n    if (currentStep === \"energy\") setCurrentStep(\"property\");\n    else if (currentStep === \"property\") setCurrentStep(\"personal\");\n    else if (currentStep === \"personal\") setCurrentStep(\"results\");\n    else if (currentStep === \"results\") setCurrentStep(\"initial\");\n  };\n\n  const goBackToMain = () => {\n    setCurrentStep(\"initial\");\n    setElectricBill(\"\");\n  };\n\n  const gridTypeOptions = [\n    {\n      id: \"three-phase\",\n      label: \"Three Phase\",\n      description: \"Perfect For High Power Usage\",\n      selected: true,\n    },\n    {\n      id: \"single-phase\",\n      label: \"Single Phase\",\n      description: \"Perfect For Low Power Usage\",\n      selected: false,\n    },\n  ];\n\n  const installationTypeOptions = [\n    {\n      id: \"ongrid\",\n      label: \"Ongrid\",\n      description: \"Check Me If You Have Grid\",\n      selected: true,\n    },\n    {\n      id: \"offgrid\",\n      label: \"Offgrid\",\n      description: \"Check Me If You Have No Energy Source\",\n      selected: false,\n    },\n    {\n      id: \"hybrid\",\n      label: \"Hybrid\",\n      description: \"I'm Adapted To All Other Energies\",\n      selected: false,\n    },\n  ];\n\n  const processSteps = [\n    {\n      title: \"Answer Our Questions\",\n      description:\n        \"Answer A Few Questions Online To Get A Price Guide. Our Installer In Your Area Will Then Contact You To Book In A Personalised Survey.\",\n      highlighted: true,\n    },\n    {\n      title: \"Get Your Quote\",\n      description:\n        \"After The Survey We'll Send You Your Bespoke Quote, Based On Your Home's Needs.\",\n      highlighted: false,\n    },\n    {\n      title: \"Book Your Installation\",\n      description:\n        \"If You Go Ahead With Us, You Can Expect A Fast, Professional Installation By A Trusted, Local Expert. All Backed By A Workmanship Guarantee.\",\n      highlighted: false,\n    },\n  ];\n\n  // Results page component\n  const ResultsPage = () => (\n    <div className=\"bg-[#06141b] min-h-screen flex flex-col items-center justify-center\">\n      <div className=\"max-w-4xl mx-auto p-8 text-center\">\n        <h1 className=\"text-white text-3xl font-bold mb-8\">You're Almost There...</h1>\n        <p className=\"text-white text-lg mb-8\">You've Seen What Solar Can Do For You<br/>Now Let Us Take Care Of The Rest</p>\n        \n        <div className=\"flex justify-center items-center gap-8 mb-8\">\n          <Button \n            className=\"bg-transparent border-2 border-white text-white px-8 py-3 rounded-full hover:bg-white/10\"\n            onClick={goToNextStep}\n          >\n            What Next â†’\n          </Button>\n          \n          <div className=\"bg-[#132e35] border-2 border-white rounded-xl p-6 min-w-[300px]\">\n            <div className=\"text-gray-400 text-sm mb-2\">Recommended</div>\n            <div className=\"text-white text-xl font-bold mb-2\">20.00kW Solar Power + 5kWh Storage</div>\n            <div className=\"text-gray-400 text-sm mb-1\">6% Offset + 1 Hours Avg Backup</div>\n            <div className=\"text-gray-400 text-sm\">Estimated System Size Based On Your Reported Electricity Use</div>\n          </div>\n        </div>\n        \n        <Button \n          className=\"bg-transparent text-white text-sm underline hover:text-gray-300\"\n          onClick={goBackToMain}\n        >\n          Back to the main\n        </Button>\n      </div>\n    </div>\n  );\n\n  // Personal info page component\n  const PersonalInfoPage = () => (\n    <div className=\"bg-[#06141b] min-h-screen flex flex-col items-center justify-center\">\n      <div className=\"max-w-6xl mx-auto p-8\">\n        <h1 className=\"text-white text-3xl font-bold text-center mb-4\">You're Almost There...</h1>\n        <p className=\"text-white text-base text-center mb-12\">Enter your personal information</p>\n        \n        <div className=\"flex justify-center items-start gap-16 mb-16\">\n          <div className=\"flex flex-col gap-6\">\n            <div className=\"flex gap-4\">\n              <Input \n                className=\"w-40 px-4 py-3 rounded-full border-2 border-white bg-transparent text-white placeholder:text-gray-400 text-sm\"\n                placeholder=\"Full name\"\n                value={formData.fullName}\n                onChange={(e) => setFormData({...formData, fullName: e.target.value})}\n              />\n              <Input \n                className=\"w-40 px-4 py-3 rounded-full border-2 border-white bg-transparent text-white placeholder:text-gray-400 text-sm\"\n                placeholder=\"Phone number\"\n                value={formData.phoneNumber}\n                onChange={(e) => setFormData({...formData, phoneNumber: e.target.value})}\n              />\n            </div>\n            <Input \n              className=\"w-full px-4 py-3 rounded-full border-2 border-white bg-transparent text-white placeholder:text-gray-400 text-sm\"\n              placeholder=\"Home address\"\n              value={formData.homeAddress}\n              onChange={(e) => setFormData({...formData, homeAddress: e.target.value})}\n            />\n            \n            <div className=\"flex gap-4 mt-4\">\n              <Button \n                className=\"bg-transparent text-white text-sm hover:text-gray-300\"\n                onClick={goToPreviousStep}\n              >\n                Previous\n              </Button>\n              <Button \n                className=\"bg-white text-black px-8 py-2 rounded-full hover:bg-gray-100 text-sm font-medium\"\n                onClick={goToNextStep}\n              >\n                Next â†’\n              </Button>\n            </div>\n          </div>\n          \n          <div className=\"bg-[#132e35] border-2 border-white rounded-xl p-6 min-w-[320px]\">\n            <div className=\"text-gray-400 text-sm mb-2\">Recommended</div>\n            <div className=\"text-white text-xl font-bold mb-2\">20.00kW Solar Power + 5kWh Storage</div>\n            <div className=\"text-gray-400 text-sm mb-1\">6% Offset + 1 Hours Avg Backup</div>\n            <div className=\"text-gray-400 text-sm\">Estimated System Size Based On Your Reported Electricity Use</div>\n          </div>\n        </div>\n        \n        <div className=\"text-center\">\n          <Button \n            className=\"bg-transparent text-white text-sm hover:text-gray-300\"\n            onClick={goBackToMain}\n          >\n            Back to the main\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n\n  // Property info page component\n  const PropertyInfoPage = () => (\n    <div className=\"bg-[#06141b] min-h-screen flex flex-col items-center justify-center\">\n      <div className=\"max-w-6xl mx-auto p-8\">\n        <h1 className=\"text-white text-3xl font-bold text-center mb-4\">You're Almost There...</h1>\n        <p className=\"text-white text-base text-center mb-12\">Enter your property information</p>\n        \n        <div className=\"flex justify-center items-start gap-16 mb-16\">\n          <div className=\"flex flex-col gap-6\">\n            <div className=\"flex gap-4\">\n              <Input \n                className=\"w-40 px-4 py-3 rounded-full border-2 border-white bg-transparent text-white placeholder:text-gray-400 text-sm\"\n                placeholder=\"Property type\"\n                value={formData.propertyType}\n                onChange={(e) => setFormData({...formData, propertyType: e.target.value})}\n              />\n              <Input \n                className=\"w-40 px-4 py-3 rounded-full border-2 border-white bg-transparent text-white placeholder:text-gray-400 text-sm\"\n                placeholder=\"Humidity index\"\n                value={formData.humidityIndex}\n                onChange={(e) => setFormData({...formData, humidityIndex: e.target.value})}\n              />\n            </div>\n            <Input \n              className=\"w-full px-4 py-3 rounded-full border-2 border-white bg-transparent text-white placeholder:text-gray-400 text-sm\"\n              placeholder=\"How much sunlight does your roof get?\"\n              value={formData.sunlightExposure}\n              onChange={(e) => setFormData({...formData, sunlightExposure: e.target.value})}\n            />\n            \n            <div className=\"flex gap-4 mt-4\">\n              <Button \n                className=\"bg-transparent text-white text-sm hover:text-gray-300\"\n                onClick={goToPreviousStep}\n              >\n                Previous\n              </Button>\n              <Button \n                className=\"bg-white text-black px-8 py-2 rounded-full hover:bg-gray-100 text-sm font-medium\"\n                onClick={goToNextStep}\n              >\n                Next â†’\n              </Button>\n            </div>\n          </div>\n          \n          <div className=\"bg-[#132e35] border-2 border-white rounded-xl p-6 min-w-[320px]\">\n            <div className=\"text-gray-400 text-sm mb-2\">Recommended</div>\n            <div className=\"text-white text-xl font-bold mb-2\">20.00kW Solar Power + 5kWh Storage</div>\n            <div className=\"text-gray-400 text-sm mb-1\">6% Offset + 1 Hours Avg Backup</div>\n            <div className=\"text-gray-400 text-sm\">Estimated System Size Based On Your Reported Electricity Use</div>\n          </div>\n        </div>\n        \n        <div className=\"text-center\">\n          <Button \n            className=\"bg-transparent text-white text-sm hover:text-gray-300\"\n            onClick={goBackToMain}\n          >\n            Back to the main\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n\n  // Energy options page component\n  const EnergyOptionsPage = () => (\n    <div className=\"bg-[#06141b] min-h-screen flex flex-col items-center justify-center\">\n      <div className=\"max-w-6xl mx-auto p-8\">\n        <h1 className=\"text-white text-3xl font-bold text-center mb-4\">You're Almost There...</h1>\n        <p className=\"text-white text-base text-center mb-12\">Energy storage options</p>\n        \n        <div className=\"flex justify-center items-start gap-16 mb-16\">\n          <div className=\"flex flex-col gap-6\">\n            <div className=\"flex gap-4\">\n              <Input \n                className=\"w-40 px-4 py-3 rounded-full border-2 border-white bg-transparent text-white placeholder:text-gray-400 text-sm\"\n                placeholder=\"Storage mode\"\n                value={formData.storageMode}\n                onChange={(e) => setFormData({...formData, storageMode: e.target.value})}\n              />\n              <Input \n                className=\"w-40 px-4 py-3 rounded-full border-2 border-white bg-transparent text-white placeholder:text-gray-400 text-sm\"\n                placeholder=\"Maintenance service\"\n                value={formData.maintenanceService}\n                onChange={(e) => setFormData({...formData, maintenanceService: e.target.value})}\n              />\n            </div>\n            <Input \n              className=\"w-full px-4 py-3 rounded-full border-2 border-white bg-transparent text-white placeholder:text-gray-400 text-sm\"\n              placeholder=\"How many hours of back up you want?\"\n              value={formData.backupHours}\n              onChange={(e) => setFormData({...formData, backupHours: e.target.value})}\n            />\n            \n            <div className=\"flex gap-4 mt-4\">\n              <Button \n                className=\"bg-transparent text-white text-sm hover:text-gray-300\"\n                onClick={goToPreviousStep}\n              >\n                Previous\n              </Button>\n              <Button \n                className=\"bg-white text-black px-8 py-2 rounded-full hover:bg-gray-100 text-sm font-medium\"\n                onClick={() => setCurrentStep(\"simulation\")}\n              >\n                Next â†’\n              </Button>\n            </div>\n          </div>\n          \n          <div className=\"bg-[#132e35] border-2 border-white rounded-xl p-6 min-w-[320px]\">\n            <div className=\"text-gray-400 text-sm mb-2\">Recommended</div>\n            <div className=\"text-white text-xl font-bold mb-2\">20.00kW Solar Power + 5kWh Storage</div>\n            <div className=\"text-gray-400 text-sm mb-1\">6% Offset + 1 Hours Avg Backup</div>\n            <div className=\"text-gray-400 text-sm\">Estimated System Size Based On Your Reported Electricity Use</div>\n          </div>\n        </div>\n        \n        <div className=\"text-center\">\n          <Button \n            className=\"bg-transparent text-white text-sm hover:text-gray-300\"\n            onClick={goBackToMain}\n          >\n            Back to the main\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n\n  // Simulation results page component\n  const SimulationPage = () => (\n    <div className=\"bg-[#06141b] min-h-screen flex flex-col items-center justify-center\">\n      <div className=\"max-w-6xl mx-auto p-8\">\n        <h1 className=\"text-white text-3xl font-bold text-center mb-12\">This Is Your Simulation</h1>\n        \n        <div className=\"flex justify-center items-start gap-16 mb-16\">\n          <div className=\"flex flex-col gap-6\">\n            <div className=\"flex justify-between items-center py-2\">\n              <span className=\"text-white text-sm\">Estimated cost</span>\n              <span className=\"text-white text-sm font-medium\">40,500.00DH</span>\n            </div>\n            <div className=\"flex justify-between items-center py-2\">\n              <span className=\"text-white text-sm\">Annual savings</span>\n              <span className=\"text-white text-sm font-medium\">6,500.00/y</span>\n            </div>\n            <div className=\"flex justify-between items-center py-2\">\n              <span className=\"text-white text-sm\">Payback period</span>\n              <span className=\"text-white text-sm font-medium\">9 Years</span>\n            </div>\n            <div className=\"flex justify-between items-center py-2\">\n              <span className=\"text-white text-sm\">Installation time</span>\n              <span className=\"text-white text-sm font-medium\">3 Days</span>\n            </div>\n            \n            <div className=\"flex gap-4 mt-4\">\n              <Button \n                className=\"bg-transparent text-white text-sm hover:text-gray-300\"\n                onClick={() => setCurrentStep(\"energy\")}\n              >\n                Previous\n              </Button>\n              <Button \n                className=\"bg-white text-black px-8 py-2 rounded-full hover:bg-gray-100 text-sm font-medium\"\n                onClick={() => setCurrentStep(\"completed\")}\n              >\n                Confirm â†’\n              </Button>\n            </div>\n          </div>\n          \n          <div className=\"bg-[#132e35] border-2 border-white rounded-xl p-6 min-w-[320px]\">\n            <div className=\"text-gray-400 text-sm mb-2\">Recommended</div>\n            <div className=\"text-white text-xl font-bold mb-2\">20.00kW Solar Power + 5kWh Storage</div>\n            <div className=\"text-gray-400 text-sm mb-1\">6% Offset + 1 Hours Avg Backup</div>\n            <div className=\"text-gray-400 text-sm\">Estimated System Size Based On Your Reported Electricity Use</div>\n          </div>\n        </div>\n        \n        <div className=\"text-center\">\n          <Button \n            className=\"bg-transparent text-white text-sm hover:text-gray-300\"\n            onClick={goBackToMain}\n          >\n            Back to the main\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n\n  // Completion page component\n  const CompletionPage = () => (\n    <div className=\"bg-[#06141b] min-h-screen flex flex-col items-center justify-center\">\n      <div className=\"max-w-4xl mx-auto p-8 text-center\">\n        <h1 className=\"text-white text-4xl font-bold mb-8\">All Done</h1>\n        \n        <div className=\"w-16 h-16 bg-white rounded-full flex items-center justify-center mx-auto mb-8\">\n          <svg className=\"w-8 h-8 text-black\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n            <path fillRule=\"evenodd\" d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\" clipRule=\"evenodd\" />\n          </svg>\n        </div>\n        \n        <h2 className=\"text-white text-xl font-medium mb-4\">We'll be in touch shortly!</h2>\n        \n        <p className=\"text-white text-sm mb-2 max-w-md mx-auto\">\n          Thank you for choosing eaneer for your solar energetics\n        </p>\n        <p className=\"text-white text-sm mb-2 max-w-md mx-auto\">\n          team will contact you soon. You'll receive a WhatsApp\n        </p>\n        <p className=\"text-white text-sm mb-8 max-w-md mx-auto\">\n          message with your personalized solar offer.\n        </p>\n        \n        <p className=\"text-white text-sm mb-8 max-w-md mx-auto\">\n          <strong>Together, we're building a brighter,</strong><br/>\n          <strong>greener Morocco.</strong>\n        </p>\n        \n        <Button \n          className=\"bg-white text-black px-8 py-3 rounded-full hover:bg-gray-100 text-sm font-medium mb-16\"\n          onClick={() => alert(\"Thank you for rating your experience!\")}\n        >\n          Rate Your Experience â†’\n        </Button>\n        \n        <Button \n          className=\"bg-transparent text-white text-sm hover:text-gray-300\"\n          onClick={goBackToMain}\n        >\n          Back to the main\n        </Button>\n      </div>\n    </div>\n  );\n\n  // Render different components based on current step\n  if (currentStep === \"hero\") return <MobileHeroPage />;\n  if (currentStep === \"steps\") return <MobileStepsPage />;\n  if (currentStep === \"wizard\") return <MobileWizard onBack={() => setCurrentStep(\"initial\")} />;\n  if (currentStep === \"desktopWizard\") return <DesktopSolarInterface onNext={() => setCurrentStep(\"initial\")} onBack={() => setCurrentStep(\"initial\")} />;\n  if (currentStep === \"results\") return <ResultsPage />;\n  if (currentStep === \"personal\") return <PersonalInfoPage />;\n  if (currentStep === \"property\") return <PropertyInfoPage />;\n  if (currentStep === \"energy\") return <EnergyOptionsPage />;\n  if (currentStep === \"simulation\") return <SimulationPage />;\n  if (currentStep === \"completed\") return <CompletionPage />;\n\n  return (\n    <div className=\"bg-[#06141b] grid justify-items-center [align-items:start] w-screen\">\n      {/* Mobile Layout - Hidden on desktop */}\n      <div className=\"md:hidden w-full min-h-screen bg-[#06141b]\">\n        {/* Mobile Header */}\n        <header className=\"w-full bg-[#06141b] shadow-[0px_0px_25px_#07151c] px-4 py-4 flex items-center justify-between\">\n          {/* Logo */}\n          <div className=\"flex items-center\">\n            <img \n              src=\"/logo.png\" \n              alt=\"eaneer logo\" \n              className=\"w-6 h-6 mr-2\"\n            />\n            <span className=\"text-lg font-medium text-white\">eaneer</span>\n          </div>\n          \n          {/* Mobile Menu Button */}\n          <button className=\"text-white p-2\">\n            <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 6h16M4 12h16M4 18h16\" />\n            </svg>\n          </button>\n        </header>\n\n        {/* Hero Section */}\n        <section className=\"px-4 py-8 text-center\">\n          <div className=\"mb-4\">\n            <span className=\"text-white text-lg font-semibold\">eaneer</span>\n            <span className=\"text-white text-lg font-semibold\"> energetics summer 20%</span>\n          </div>\n          <h1 className=\"text-white text-2xl font-semibold mb-4 leading-tight\">\n            Start Saving Up to 80% /mo On average\n          </h1>\n          <p className=\"text-white text-sm mb-8 leading-relaxed max-w-sm mx-auto\">\n            Enter Your Solar Installation Details And Average Electricity Bill To Get A Quote And View Your savings\n          </p>\n          \n        </section>\n\n        {/* 3D House Model Section */}\n        <section className=\"px-4 pb-4\">\n          <div className=\"max-w-md mx-auto\">\n            <div className=\"relative flex items-center justify-center h-64 mb-4\">\n              <img \n                src=\"/figmaAssets/1-1--1.png\" \n                alt=\"3D Solar House Model\" \n                className=\"max-w-full max-h-full object-contain\"\n              />\n            </div>\n          </div>\n        </section>\n\n        {/* Calculator Section */}\n        <section className=\"px-4 pb-8\">\n          <Card className=\"bg-[#06141b] rounded-2xl border-0 max-w-md mx-auto shadow-[0px_0px_20px_5px_#2c4a52]\">\n            <CardContent className=\"p-6\">\n              {/* Grid Type */}\n              <div className=\"mb-6\">\n                <h3 className=\"text-white text-lg font-semibold mb-4 font-['Rubik']\">Grid Type</h3>\n                <div className=\"flex gap-3 h-[85px]\">\n                  {gridTypeOptions.map((option) => (\n                    <div\n                      key={option.id}\n                      className={`flex-1 px-2 py-2 rounded-[15px] border-2 cursor-pointer transition-all duration-200 h-full flex flex-col ${\n                        selectedGridType === option.id\n                          ? \"border-white bg-[#0a1b23]\"\n                          : \"border-gray-600 bg-[#0a1b23]\"\n                      }`}\n                      onClick={() => setSelectedGridType(option.id)}\n                      data-testid={`grid-${option.id}`}\n                    >\n                      <div className=\"flex items-start mb-1\">\n                        <div className={`w-[14px] h-[14px] rounded-full border-2 mr-1.5 mt-0.5 flex-shrink-0 ${\n                          selectedGridType === option.id ? \"border-white bg-[#d9d9d9]\" : \"border-white\"\n                        }`}>\n                          {selectedGridType === option.id && (\n                            <div className=\"w-full h-full rounded-full bg-[#d9d9d9] flex items-center justify-center\">\n                              <div className=\"w-1 h-1 bg-black rounded-full\"></div>\n                            </div>\n                          )}\n                        </div>\n                        <div className=\"text-white font-bold text-[11px] font-['Inter'] leading-tight\">{option.label}</div>\n                      </div>\n                      <div className=\"text-white text-[9px] leading-tight font-['Inter'] ml-4 flex-1\">\n                        {option.description}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              {/* Installation Type */}\n              <div className=\"mb-6\">\n                <h3 className=\"text-white text-lg font-semibold mb-4 font-['Rubik']\">Installation Type</h3>\n                <div className=\"grid grid-cols-3 gap-3 h-[85px]\">\n                  {installationTypeOptions.map((option) => (\n                    <div\n                      key={option.id}\n                      className={`px-2 py-2 rounded-[15px] border-2 cursor-pointer transition-all duration-200 h-full flex flex-col ${\n                        selectedInstallationType === option.id\n                          ? \"border-white bg-[#0a1b23]\"\n                          : \"border-gray-600 bg-[#0a1b23]\"\n                      }`}\n                      onClick={() => setSelectedInstallationType(option.id)}\n                      data-testid={`installation-${option.id}`}\n                    >\n                      <div className=\"flex items-start mb-1\">\n                        <div className={`w-[14px] h-[14px] rounded-full border-2 mr-1.5 mt-0.5 flex-shrink-0 ${\n                          selectedInstallationType === option.id ? \"border-white bg-[#d9d9d9]\" : \"border-white\"\n                        }`}>\n                          {selectedInstallationType === option.id && (\n                            <div className=\"w-full h-full rounded-full bg-[#d9d9d9] flex items-center justify-center\">\n                              <div className=\"w-1 h-1 bg-black rounded-full\"></div>\n                            </div>\n                          )}\n                        </div>\n                        <div className=\"text-white font-bold text-[11px] font-['Inter'] leading-tight\">{option.label}</div>\n                      </div>\n                      <div className=\"text-white text-[9px] leading-tight font-['Inter'] ml-4 flex-1\">\n                        {option.description}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              {/* Electric Bill Input */}\n              <div className=\"mb-6\">\n                <h3 className=\"text-white text-lg font-semibold mb-4 font-['Rubik']\">Electric Bill</h3>\n                <div className=\"flex gap-3 items-end\">\n                  <div className=\"relative flex-1\">\n                    <Input\n                      id=\"electricBill\"\n                      type=\"number\"\n                      placeholder=\"0.00\"\n                      value={electricBill}\n                      onChange={(e) => setElectricBill(e.target.value)}\n                      className=\"w-full px-4 py-3 rounded-[10px] border border-white bg-transparent text-white placeholder:text-[#ffffff40] text-sm\"\n                      data-testid=\"input-electric-bill\"\n                    />\n                    <div className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-white text-sm font-light font-['Rubik'] pointer-events-none\">\n                      Dh\n                    </div>\n                  </div>\n                  \n                  <Button\n                    onClick={handleCalculate}\n                    className=\"bg-white text-black px-6 py-3 rounded-[10px] hover:bg-white/90 font-semibold text-sm font-['Rubik'] whitespace-nowrap\"\n                    data-testid=\"button-calculate\"\n                  >\n                    Calculate\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </section>\n\n        {/* Power Your Home Save Money Section */}\n        <section className=\"relative w-full h-[32rem] bg-[url(/figmaAssets/image-8-bit-style.png)] bg-cover bg-center flex items-center justify-center px-4\">\n          <div className=\"text-center max-w-md mx-auto\">\n            <h2 className=\"text-white text-2xl font-bold mb-4 leading-tight\">\n              Power Your Home, Save Money\n            </h2>\n            <p className=\"text-white text-base font-medium mb-8 leading-relaxed\">\n              Whether your goal is to reduce your electric bill or eliminate it completely, eaneer can help make that happen.\n            </p>\n            \n            <Button className=\"w-full max-w-[280px] mx-auto bg-transparent border-2 border-white text-white px-3 py-2.5 rounded-full hover:bg-white/10 flex items-center justify-between text-xs sm:text-base sm:px-6 sm:py-3\">\n              <span className=\"font-bold\">Ready To Save Energy?</span>\n              <div className=\"w-6 h-6 sm:w-8 sm:h-8 bg-white rounded-full flex items-center justify-center flex-shrink-0\">\n                <svg width=\"12\" height=\"12\" viewBox=\"0 0 24 24\" fill=\"none\" className=\"sm:w-4 sm:h-4\">\n                  <path d=\"M13 2L3 14h9l-1 8 10-12h-9l1-8z\" fill=\"black\"/>\n                </svg>\n              </div>\n            </Button>\n          </div>\n        </section>\n\n        {/* How Do I Get Started Section */}\n        <section className=\"px-4 py-12 bg-[#06141b]\">\n          <div className=\"max-w-md mx-auto text-center\">\n            {/* Header */}\n            <p className=\"text-gray-400 text-sm mb-4\">How Do I Get Started?</p>\n            <h2 className=\"text-white text-xl font-bold mb-2\">\n              Explore <span className=\"text-[#69818d]\">eaneer Energetics</span> : Solar Energy Installations\n            </h2>\n          </div>\n\n          {/* Process Steps Cards */}\n          <div className=\"max-w-md mx-auto mt-8 space-y-4\">\n            {processSteps.map((step, index) => (\n              <div\n                key={index}\n                onClick={() => setSelectedProcessStep(index)}\n                className={`bg-[#132e35] rounded-2xl p-6 cursor-pointer transition-all duration-300 ease-in-out transform hover:scale-105 hover:shadow-lg ${\n                  step.highlighted || selectedProcessStep === index\n                    ? \"border-2 border-white shadow-md shadow-white/20\" \n                    : \"border border-gray-600 hover:border-white hover:border-2\"\n                }`}\n                data-testid={`process-step-${index}`}\n              >\n                <h3 className=\"text-white text-lg font-semibold mb-3 transition-colors duration-300\">\n                  {step.title}\n                </h3>\n                <p className=\"text-gray-300 text-sm leading-relaxed transition-colors duration-300 hover:text-gray-200\">\n                  {step.description}\n                </p>\n              </div>\n            ))}\n          </div>\n\n          {/* CTA Button */}\n          <div className=\"text-center mt-8\">\n            <Button className=\"w-full max-w-[280px] mx-auto bg-transparent border-2 border-white text-white px-3 py-2.5 rounded-full hover:bg-white/10 flex items-center justify-between text-xs sm:text-base sm:px-6 sm:py-3\">\n              <span className=\"font-bold\">Ready To Save Energy?</span>\n              <div className=\"w-6 h-6 sm:w-8 sm:h-8 bg-white rounded-full flex items-center justify-center flex-shrink-0\">\n                <svg width=\"12\" height=\"12\" viewBox=\"0 0 24 24\" fill=\"none\" className=\"sm:w-4 sm:h-4\">\n                  <path d=\"M13 2L3 14h9l-1 8 10-12h-9l1-8z\" fill=\"black\"/>\n                </svg>\n              </div>\n            </Button>\n          </div>\n        </section>\n\n        {/* Contact Section */}\n        <section className=\"px-4 py-12 bg-[#06141b]\">\n          <div className=\"max-w-md mx-auto\">\n            <div className=\"bg-white rounded-3xl p-8 shadow-sm border border-gray-200\">\n              <div className=\"mb-6\">\n                <p className=\"text-gray-500 text-sm font-medium mb-3\">\n                  Contact us today!\n                </p>\n                <h2 className=\"text-gray-900 text-2xl font-semibold leading-tight\">\n                  Have questions about our services or ready to start your project?\n                </h2>\n              </div>\n              \n              <div className=\"space-y-4\">\n                <Input\n                  type=\"email\"\n                  placeholder=\"Type your email\"\n                  className=\"w-full px-4 py-3 rounded-xl border border-gray-200 bg-white text-gray-900 placeholder:text-gray-400 focus:border-[#06141b] focus:ring-1 focus:ring-[#06141b]\"\n                  data-testid=\"input-contact-email\"\n                />\n                <Button className=\"w-full bg-[#06141b] text-white py-3 rounded-xl hover:bg-[#06141b]/90 font-medium\">\n                  Get started\n                </Button>\n              </div>\n            </div>\n          </div>\n        </section>\n\n        {/* Mobile Footer */}\n        <footer className=\"px-4 py-8 border-t border-[#2c4a52] mt-0\">\n          {/* Main Footer Content */}\n          <div className=\"max-w-md mx-auto\">\n            {/* Logo and Description */}\n            <div className=\"text-center mb-8\">\n              <div className=\"flex items-center justify-center mb-4\">\n                <div className=\"w-6 h-6 mr-2 flex items-center justify-center bg-white rounded\">\n                  <svg width=\"20\" height=\"20\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <polygon points=\"0,0 10,0 10,10 0,10\" fill=\"black\"/>\n                    <polygon points=\"10,0 20,0 20,10 15,10 15,15 10,15\" fill=\"black\"/>\n                    <polygon points=\"0,10 15,10 15,20 0,20\" fill=\"black\"/>\n                  </svg>\n                </div>\n                <span className=\"text-lg font-medium text-white\">eaneer</span>\n              </div>\n              <p className=\"text-white text-sm font-medium mb-1\">\n                Contact Eaneer for Innovative Energy Solutions.\n              </p>\n              <p className=\"text-white text-sm mb-1\">\n                Transform Your Vision into Reality with Speed,\n              </p>\n              <p className=\"text-white text-sm\">\n                Efficiency and Savings.\n              </p>\n            </div>\n\n            {/* Navigation Links */}\n            <div className=\"grid grid-cols-2 gap-6 mb-8\">\n              <div>\n                <h4 className=\"text-white font-bold text-sm mb-3\">Home</h4>\n                <div className=\"space-y-2\">\n                  <div className=\"text-gray-400 text-xs hover:text-white cursor-pointer\">About us</div>\n                  <div className=\"text-gray-400 text-xs hover:text-white cursor-pointer\">Technologies</div>\n                </div>\n              </div>\n              \n              <div>\n                <h4 className=\"text-white font-bold text-sm mb-3\">Industry</h4>\n                <div className=\"space-y-2\">\n                  <div className=\"text-gray-400 text-xs hover:text-white cursor-pointer\">Industrial</div>\n                  <div className=\"text-gray-400 text-xs hover:text-white cursor-pointer\">Agriculture</div>\n                  <div className=\"text-gray-400 text-xs hover:text-white cursor-pointer\">Building</div>\n                </div>\n              </div>\n              \n              <div>\n                <h4 className=\"text-white font-bold text-sm mb-3\">Investors</h4>\n                <div className=\"space-y-2\">\n                  <div className=\"text-gray-400 text-xs hover:text-white cursor-pointer\">Projects</div>\n                  <div className=\"text-gray-400 text-xs hover:text-white cursor-pointer\">Finance</div>\n                  <div className=\"text-gray-400 text-xs hover:text-white cursor-pointer\">Statements</div>\n                </div>\n              </div>\n              \n              <div>\n                <h4 className=\"text-white font-bold text-sm mb-3\">Company</h4>\n                <div className=\"space-y-2\">\n                  <div className=\"text-gray-400 text-xs hover:text-white cursor-pointer\">Purpose</div>\n                  <div className=\"text-gray-400 text-xs hover:text-white cursor-pointer\">Innovation</div>\n                  <div className=\"text-gray-400 text-xs hover:text-white cursor-pointer\">Partners</div>\n                </div>\n              </div>\n            </div>\n          </div>\n          \n          {/* Bottom Links */}\n          <div className=\"border-t border-[#2c4a52] pt-4\">\n            <div className=\"text-center space-y-3\">\n              <div className=\"flex flex-wrap justify-center gap-4 text-xs\">\n                <span className=\"text-gray-400 hover:text-white cursor-pointer\">Privacy policy</span>\n                <span className=\"text-gray-400 hover:text-white cursor-pointer\">Terms of Service</span>\n                <span className=\"text-gray-400 hover:text-white cursor-pointer\">Accessibility</span>\n                <span className=\"text-gray-400 hover:text-white cursor-pointer\">Contact</span>\n                <span className=\"text-gray-400 hover:text-white cursor-pointer\">Legal</span>\n              </div>\n              <div className=\"text-gray-400 text-xs\">\n                2024 eaneer. All rights reserved\n              </div>\n            </div>\n          </div>\n        </footer>\n      </div>\n      {/* Desktop Layout - Hidden on mobile */}\n      <div className=\"hidden md:block bg-[#06141b] w-[1920px] h-[6326px] relative\">\n        <header className=\"w-[1920px] h-[86px] top-0 left-0 absolute z-10\">\n          <div className=\"w-full h-full bg-[#06141b] shadow-[0px_0px_25px_#07151c]\">\n            <div className=\"w-full h-full flex items-center px-16\">\n            <div className=\"flex items-center justify-between w-full\">\n              {/* Logo */}\n              <div className=\"flex items-center\">\n                <img \n                  src=\"/logo.png\" \n                  alt=\"eaneer logo\" \n                  className=\"w-8 h-8 mr-3\"\n                />\n                <span className=\"text-xl font-medium text-white\">\n                  eaneer\n                </span>\n              </div>\n\n              {/* Center Navigation */}\n              <nav className=\"flex items-center space-x-8\">\n                <button className=\"flex items-center text-white text-sm font-medium hover:text-gray-300 transition-colors duration-200 focus:outline-none\">\n                  Company\n                  <svg className=\"w-3 h-3 ml-1\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\n                  </svg>\n                </button>\n                <button className=\"flex items-center text-white text-sm font-medium hover:text-gray-300 transition-colors duration-200 focus:outline-none\">\n                  Industry\n                  <svg className=\"w-3 h-3 ml-1\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\n                  </svg>\n                </button>\n                <button className=\"flex items-center text-white text-sm font-medium hover:text-gray-300 transition-colors duration-200 focus:outline-none\">\n                  Services\n                  <svg className=\"w-3 h-3 ml-1\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\n                  </svg>\n                </button>\n                <button className=\"text-white text-sm font-medium hover:text-gray-300 transition-colors duration-200\">\n                  Career\n                </button>\n                <button className=\"text-white text-sm font-medium hover:text-gray-300 transition-colors duration-200\">\n                  Finance\n                </button>\n                <button className=\"text-white text-sm font-medium hover:text-gray-300 transition-colors duration-200\">\n                  Support\n                </button>\n              </nav>\n\n              {/* Right side - Login and Get started */}\n              <div className=\"flex items-center space-x-4\">\n                <button className=\"text-white text-sm font-medium hover:text-gray-300 transition-colors duration-200\">\n                  Login\n                </button>\n                <button className=\"px-4 py-2 text-sm font-medium rounded-md transition-all duration-200 hover:opacity-90 bg-white text-black\">\n                  Get started\n                </button>\n              </div>\n            </div>\n            </div>\n          </div>\n        </header>\n\n        <section className=\"absolute w-[882px] h-[129px] top-[168px] left-[522px]\">\n          <div className=\"absolute top-0 left-[287px] [font-family:'Source_Code_Pro',Helvetica] font-semibold text-white text-lg tracking-[0] leading-[normal]\">\n            <span className=\"[font-family:'Source_Code_Pro',Helvetica] font-semibold text-white text-lg tracking-[0]\">\n              eaneer\n            </span>\n            <span className=\"[font-family:'Source_Code_Pro',Helvetica] font-semibold text-white text-lg tracking-[0]\">\n              {\" \"}\n              energetics summer 20%\n            </span>\n          </div>\n          <div className=\"absolute top-12 left-[167px] [font-family:'Inter',Helvetica] font-semibold text-white text-[28px] tracking-[0] leading-[normal]\">\n            Start Saving Up to 80% /mo On average\n          </div>\n          <div className=\"absolute top-[107px] left-0 [font-family:'Inter',Helvetica] font-medium text-white text-lg tracking-[0] leading-[normal]\">\n            Enter Your Solar Installation Details And Average Electricity Bill\n            To Get A Quote And View Your savings\n          </div>\n        </section>\n\n        <Button className=\"top-[351px] left-[797px] absolute w-[327px] h-[61px] rounded-[30px] border-2 border-solid border-white bg-transparent hover:bg-white/10 h-auto flex items-center justify-between px-[18px]\">\n          <span className=\"[font-family:'Inter',Helvetica] font-bold text-white text-xl tracking-[0] leading-[normal] whitespace-nowrap\">\n            Ready To Save Energy?\n          </span>\n          <img\n            className=\"w-[43px] h-[43px]\"\n            alt=\"Component\"\n            src=\"/figmaAssets/component-1.svg\"\n          />\n        </Button>\n\n        <section className=\"absolute w-[1361px] h-[527px] top-[461px] left-[217px]\">\n          <div className=\"absolute w-[1251px] h-[527px] top-0 left-[110px]\">\n            <div className=\"relative w-[1918px] h-[546px] top-[5px] left-[-327px] bg-[#06141b] shadow-[0px_0px_25px_#2c4a52]\">\n              <Card className=\"relative w-[582px] h-[491px] top-[31px] left-[1014px] bg-[#06141b] rounded-[20px] shadow-[0px_0px_20px_5px_#2c4a52] border-0\">\n                <CardContent className=\"absolute w-[529px] h-[339px] top-[17px] left-9 p-0\">\n                  <div className=\"relative w-[535px] h-[339px]\">\n                    <div className=\"absolute w-[125px] top-0 left-0 [font-family:'Rubik',Helvetica] font-semibold text-white text-xl tracking-[0] leading-[normal] whitespace-nowrap\">\n                      Grid Type\n                    </div>\n\n                    <div className=\"absolute w-[529px] h-[304px] top-9 left-0\">\n                      <div className=\"absolute w-[207px] top-[147px] left-0 [font-family:'Rubik',Helvetica] font-semibold text-white text-xl tracking-[0] leading-[normal] whitespace-nowrap\">\n                        Installation Type\n                      </div>\n\n                      <div className=\"absolute w-[529px] h-[304px] top-0 left-0\">\n                        <RadioGroup\n                          value={selectedInstallationType}\n                          onValueChange={setSelectedInstallationType}\n                          className=\"absolute w-[529px] h-[122px] top-[182px] left-0 flex flex-row gap-[13px]\"\n                        >\n                          {installationTypeOptions.map((option, index) => (\n                            <div\n                              key={option.id}\n                              className=\"w-[168px] h-[122px]\"\n                            >\n                              <div\n                                className={`w-[169px] h-[123px] rounded-[15px] border-2 ${\n                                  selectedInstallationType === option.id\n                                    ? \"border-white bg-[#0a1b23]\"\n                                    : \"border-gray-600 bg-[#0a1b23]\"\n                                }`}\n                              >\n                                <div className=\"relative w-[137px] h-[82px] top-[17px] left-[13px]\">\n                                  <div className=\"top-[3px] left-0 absolute w-[18px] h-[18px]\">\n                                    <RadioGroupItem\n                                      value={option.id}\n                                      id={option.id}\n                                      className=\"relative h-[18px] w-[18px] rounded-[9.1px] border-white data-[state=checked]:bg-[#d9d9d9] data-[state=checked]:border-white\"\n                                    />\n                                  </div>\n                                  <Label\n                                    htmlFor={option.id}\n                                    className=\"absolute w-[66px] top-0 left-7 [font-family:'Inter',Helvetica] font-bold text-white text-lg tracking-[0] leading-[normal] cursor-pointer\"\n                                  >\n                                    {option.label}\n                                  </Label>\n                                  <div className=\"absolute w-[110px] top-[33px] left-[23px] [font-family:'Inter',Helvetica] font-normal text-white text-[15px] tracking-[0] leading-[normal]\">\n                                    {option.description}\n                                  </div>\n                                </div>\n                              </div>\n                            </div>\n                          ))}\n                        </RadioGroup>\n\n                        <RadioGroup\n                          value={selectedGridType}\n                          onValueChange={setSelectedGridType}\n                          className=\"absolute w-[528px] h-[122px] top-0 left-0 flex flex-row gap-2\"\n                        >\n                          {gridTypeOptions.map((option, index) => (\n                            <div\n                              key={option.id}\n                              className=\"w-[262px] h-[122px]\"\n                            >\n                              <div\n                                className={`relative w-[259px] h-[123px] rounded-[15px] border-2 ${\n                                  selectedGridType === option.id\n                                    ? \"border-white bg-[#0a1b23]\"\n                                    : \"border-gray-600 bg-[#0a1b23]\"\n                                }`}\n                              >\n                                <div className=\"top-5 left-[19px] absolute w-[18px] h-[18px]\">\n                                  <RadioGroupItem\n                                    value={option.id}\n                                    id={option.id}\n                                    className=\"relative h-[18px] w-[18px] rounded-[9.1px] border-white data-[state=checked]:bg-[#d9d9d9] data-[state=checked]:border-white\"\n                                  />\n                                </div>\n                                <Label\n                                  htmlFor={option.id}\n                                  className=\"absolute w-[150px] top-[17px] left-[47px] [font-family:'Inter',Helvetica] font-bold text-white text-lg tracking-[0] leading-[normal] cursor-pointer whitespace-nowrap\"\n                                >\n                                  {option.label}\n                                </Label>\n                                <div className=\"absolute w-[184px] top-[48px] left-[46px] [font-family:'Inter',Helvetica] font-normal text-white text-base tracking-[0] leading-[normal]\">\n                                  {option.description}\n                                </div>\n                              </div>\n                            </div>\n                          ))}\n                        </RadioGroup>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n\n                <div className=\"absolute w-[532px] h-[78px] top-[380px] left-9\">\n                  <div className=\"absolute w-[530px] h-[43px] top-[35px] left-0\">\n                    <div className=\"absolute w-[253px] h-[42px] top-0 left-0\">\n                      <Input\n                        className=\"relative w-[249px] h-[42px] rounded-[10px] border border-solid border-white bg-transparent text-white placeholder:text-[#ffffff40]\"\n                        placeholder=\"0.00\"\n                        value={electricBill}\n                        onChange={(e) => setElectricBill(e.target.value)}\n                        type=\"number\"\n                      />\n                      <div className=\"absolute w-[23px] top-2.5 left-[205px] [font-family:'Rubik',Helvetica] font-light text-white text-base tracking-[0] leading-[normal] pointer-events-none\">\n                        Dh\n                      </div>\n                    </div>\n\n                    <Button \n                      className=\"absolute w-[251px] h-[42px] top-px left-[281px] bg-white rounded-[10px] border border-solid hover:bg-white/90 h-auto flex items-center justify-center\"\n                      onClick={handleCalculate}\n                    >\n                      <span className=\"[font-family:'Rubik',Helvetica] font-semibold text-black text-lg tracking-[0] leading-[normal] whitespace-nowrap\">\n                        Calculate\n                      </span>\n                    </Button>\n                  </div>\n\n                  <div className=\"absolute w-[147px] top-0 left-0 [font-family:'Rubik',Helvetica] font-semibold text-white text-xl tracking-[0] leading-[normal]\">\n                    Electric Bill\n                  </div>\n                </div>\n              </Card>\n            </div>\n          </div>\n\n          <img\n            className=\"absolute w-[792px] h-[445px] top-12 left-0 object-cover\"\n            alt=\"Element\"\n            src=\"/figmaAssets/1-1--1.png\"\n          />\n        </section>\n\n        <img\n          className=\"w-[23px] h-[26px] top-[1089px] left-[948px] absolute object-cover\"\n          alt=\"Image\"\n          src=\"/figmaAssets/image-13.png\"\n        />\n\n        <section className=\"absolute w-[1918px] h-[922px] top-[1185px] left-px bg-[url(/figmaAssets/image-8-bit-style.png)] bg-[100%_100%]\">\n          <div className=\"relative w-[738px] h-[249px] top-[336px] left-[592px]\">\n            <div className=\"absolute w-[734px] top-[85px] left-0 [font-family:'Inter',Helvetica] font-medium text-white text-xl text-center tracking-[0] leading-[normal]\">\n              Whether your goal is to reduce your electric bill or eliminate it\n              completely, eaneer can help make that happen.\n            </div>\n\n            <div className=\"absolute top-0 left-[156px] [font-family:'Inter',Helvetica] font-bold text-white text-[28px] text-center tracking-[0] leading-[normal]\">\n              Power Your Home, Save Money\n            </div>\n\n            <Button className=\"absolute w-[327px] h-[61px] top-[188px] left-[200px] rounded-[30px] border-2 border-solid border-white bg-transparent hover:bg-white/10 h-auto flex items-center justify-between px-[18px]\">\n              <span className=\"[font-family:'Inter',Helvetica] font-bold text-white text-xl tracking-[0] leading-[normal] whitespace-nowrap\">\n                Ready To Save Energy?\n              </span>\n              <img\n                className=\"w-[43px] h-[43px]\"\n                alt=\"Component\"\n                src=\"/figmaAssets/component-1.svg\"\n              />\n            </Button>\n          </div>\n        </section>\n\n        <section className=\"absolute w-[1919px] h-[986px] top-[2191px] left-0 bg-[#f8f8f8]\">\n          <div className=\"absolute top-[117px] left-[738px] [font-family:'Inter',Helvetica] font-bold text-black text-[28px] text-center tracking-[0] leading-[normal]\">\n            Take Control of Your Energy Bills\n          </div>\n\n          <div className=\"absolute w-[820px] top-[189px] left-[550px] [font-family:'Inter',Helvetica] font-semibold text-black text-base text-center tracking-[0] leading-[normal]\">\n            Take control of your energy bills by switching to solar power; reduce reliance on expensive electricity, lock in lower rates, and enjoy long term savings\n          </div>\n\n          <Button className=\"top-[265px] left-[797px] absolute w-[327px] h-[61px] rounded-[30px] border-2 border-solid border-[#06141b] bg-transparent hover:bg-[#06141b]/10 h-auto flex items-center justify-between px-[18px]\">\n            <span className=\"[font-family:'Inter',Helvetica] font-bold text-[#06141b] text-xl tracking-[0] leading-[normal] whitespace-nowrap\">\n              Ready To Save Energy?\n            </span>\n            <img\n              className=\"w-[43px] h-[43px]\"\n              alt=\"Component\"\n              src=\"/figmaAssets/component-1-2.svg\"\n            />\n          </Button>\n\n          <img\n            className=\"w-[723px] h-[482px] top-[381px] left-[589px] absolute object-cover\"\n            alt=\"Image\"\n            src=\"/figmaAssets/image-10.png\"\n          />\n\n          <div className=\"absolute top-[917px] left-[717px] [font-family:'Inter',Helvetica] font-semibold text-black text-xl text-center tracking-[0] leading-[normal] whitespace-nowrap\">\n            It takes just a few steps to make your family happy\n          </div>\n        </section>\n\n        <div className=\"absolute top-[3439px] left-[853px] [font-family:'Inter',Helvetica] font-semibold text-white text-xl text-center tracking-[0] leading-[normal] whitespace-nowrap\">\n          How Do I Get Started?\n        </div>\n\n        <div className=\"absolute top-[3484px] left-[599px] [font-family:'Inter',Helvetica] font-bold text-transparent text-[28px] text-center tracking-[0] leading-[normal]\">\n          <span className=\"text-white\">Explore </span>\n          <span className=\"text-[#69818d]\">eaneer</span>\n          <span className=\"text-[#69818d]\"> energetics</span>\n          <span className=\"text-white\">: Solar Energy installations</span>\n        </div>\n\n        <section className=\"absolute w-[918px] h-[247px] top-[3608px] left-[502px]\">\n          <div className=\"flex gap-[17px]\">\n            {processSteps.map((step, index) => (\n              <Card\n                key={index}\n                className={`w-[296px] h-[247px] bg-[#132e35] rounded-[20px] ${step.highlighted ? \"border-[3px] border-solid border-white\" : \"border-2 border-solid border-white\"} relative`}\n              >\n                <CardContent className=\"h-full flex flex-col p-0\">\n                  <div className=\"absolute top-[45px] left-[21px] [font-family:'Inter',Helvetica] font-semibold text-white text-xl tracking-[0] leading-[normal]\">\n                    {step.title}\n                  </div>\n                  <div className=\"absolute w-[245px] top-[89px] left-[21px] [font-family:'Inter',Helvetica] font-medium text-white text-[15px] tracking-[0] leading-[normal]\">\n                    {step.description}\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </section>\n\n        <Button className=\"top-[3944px] left-[815px] absolute w-[327px] h-[61px] rounded-[30px] border-2 border-solid border-white bg-transparent hover:bg-white/10 h-auto flex items-center justify-between px-[18px]\">\n          <span className=\"[font-family:'Inter',Helvetica] font-bold text-white text-xl tracking-[0] leading-[normal] whitespace-nowrap\">\n            Ready To Save Energy?\n          </span>\n          <img\n            className=\"w-[43px] h-[43px]\"\n            alt=\"Component\"\n            src=\"/figmaAssets/component-1.svg\"\n          />\n        </Button>\n\n        <Button className=\"top-[5097px] left-[796px] absolute w-[327px] h-[61px] rounded-[30px] border-2 border-solid border-white bg-transparent hover:bg-white/10 h-auto flex items-center justify-between px-[18px]\">\n          <span className=\"[font-family:'Inter',Helvetica] font-bold text-white text-xl tracking-[0] leading-[normal] whitespace-nowrap\">\n            Ready To Save Energy?\n          </span>\n          <img\n            className=\"w-[43px] h-[43px]\"\n            alt=\"Component\"\n            src=\"/figmaAssets/component-1.svg\"\n          />\n        </Button>\n\n        <img\n          className=\"w-[23px] h-[26px] top-[4091px] left-[948px] absolute object-cover\"\n          alt=\"Image\"\n          src=\"/figmaAssets/image-13.png\"\n        />\n\n        <div className=\"absolute w-[1040px] top-[4358px] left-[440px] [font-family:'Inter',Helvetica] font-semibold text-transparent text-[51px] text-justify tracking-[0] leading-[normal]\">\n          <span className=\"text-white\">With </span>\n          <span className=\"text-[#69818d]\">eaneer energetics</span>\n          <span className=\"text-white\">\n            , your impact lives on. We&apos;re on a mission to make Morocco a\n            beacon of green energy. Every solar installation is more than\n            savings it&apos;s a legacy. Join our community, grow your impact,\n            and inspire the future.\n          </span>\n        </div>\n\n        <div className=\"absolute top-[4872px] left-[440px] bg-[linear-gradient(90deg,rgba(255,255,255,1)_0%,rgba(44,74,82,1)_50%,rgba(255,255,255,1)_75%,rgba(105,129,141,1)_100%)] [-webkit-background-clip:text] bg-clip-text [-webkit-text-fill-color:transparent] [text-fill-color:transparent] [font-family:'Inter',Helvetica] font-semibold text-transparent text-5xl tracking-[0] leading-[normal]\">\n          Together, We Rise Under One Sun.\n        </div>\n\n        <div className=\"w-[1280px] h-[309px] top-[5362px] left-80 absolute\">\n          <div className=\"min-h-full flex justify-center items-center p-5 bg-[#06141b]\" style={{ backgroundColor: '#06141b' }}>\n            <div \n              className=\"bg-white rounded-3xl max-w-6xl w-full flex justify-between items-center shadow-sm\"\n              style={{ \n                border: '1.5px solid #e1e5e9',\n                padding: '60px 80px'\n              }}\n            >\n              <div className=\"flex-1 pr-16\">\n                <div \n                  className=\"text-base font-medium mb-4 tracking-wide\"\n                  style={{ color: '#6b7280' }}\n                >\n                  Contact us today!\n                </div>\n                <h2 \n                  className=\"text-5xl font-semibold leading-tight\"\n                  style={{ \n                    color: '#1f2937',\n                    fontSize: '42px',\n                    lineHeight: '1.2'\n                  }}\n                >\n                  Have questions about our services or ready to start your project?\n                </h2>\n              </div>\n              \n              <div className=\"flex flex-col gap-4\" style={{ flex: '0 0 400px' }}>\n                <input\n                  type=\"email\"\n                  placeholder=\"Type your email\"\n                  className=\"w-full px-6 py-5 text-base font-normal bg-white rounded-xl outline-none transition-all duration-200\"\n                  style={{\n                    border: '2px solid #e5e7eb',\n                    color: '#374151'\n                  }}\n                />\n                <button\n                  className=\"w-full px-6 py-5 text-white text-base font-semibold rounded-xl cursor-pointer outline-none transition-all duration-200 hover:transform hover:-translate-y-px active:translate-y-0\"\n                  style={{\n                    backgroundColor: '#374151',\n                    border: 'none'\n                  }}\n                >\n                  Get started\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <img\n          className=\"w-[23px] h-[26px] top-[5820px] left-[948px] absolute object-cover\"\n          alt=\"Image\"\n          src=\"/figmaAssets/image-13.png\"\n        />\n\n        <footer className=\"w-[1920px] h-[329px] top-[5997px] left-0 absolute bg-[#06141b] border-t border-[#2c4a52]\">\n          <div className=\"max-w-7xl mx-auto px-5 py-5\">\n            <div className=\"flex justify-between items-start\">\n              {/* Left section - Logo and Description */}\n              <div className=\"flex flex-col flex-1 mr-10\">\n                {/* Logo */}\n                <div className=\"flex items-center mb-5\">\n                  <img\n                    src=\"/attached_assets/logo.png\"\n                    alt=\"eaneer logo\"\n                    className=\"w-10 h-10 mr-2.5\"\n                  />\n                  <div>\n                    <div className=\"[font-family:'Inter',Helvetica] font-bold text-white text-2xl\">\n                      eaneer\n                    </div>\n                    <div className=\"[font-family:'Inter',Helvetica] font-normal text-[#69818d] text-xs mt-1\">\n                      Powering a Promising Future for Everyone\n                    </div>\n                  </div>\n                </div>\n                \n                {/* Contact Info */}\n                <div className=\"mb-5\">\n                  <h2 className=\"[font-family:'Inter',Helvetica] font-normal text-white text-base mb-2\">\n                    Contact Eaneer for the Energy Future\n                  </h2>\n                  <p className=\"[font-family:'Inter',Helvetica] font-normal text-white text-sm mb-1\">\n                    Contact Eaneer for Innovative Energy Solutions.\n                  </p>\n                  <p className=\"[font-family:'Inter',Helvetica] font-normal text-white text-sm mb-1\">\n                    Transform Your Vision into Reality with Speed,\n                  </p>\n                  <p className=\"[font-family:'Inter',Helvetica] font-normal text-white text-sm\">\n                    Efficiency and Savings.\n                  </p>\n                </div>\n              </div>\n\n              {/* Navigation columns */}\n              <div className=\"flex gap-16\">\n                {/* Home column */}\n                <div className=\"flex flex-col\">\n                  <div className=\"[font-family:'Inter',Helvetica] font-bold text-white text-base mb-4 cursor-pointer\">\n                    Home\n                  </div>\n                  <div className=\"flex flex-col\">\n                    <div className=\"[font-family:'Inter',Helvetica] font-normal text-[#69818d] text-sm mb-2 cursor-pointer hover:text-white\">\n                      About us\n                    </div>\n                    <div className=\"[font-family:'Inter',Helvetica] font-normal text-[#69818d] text-sm mb-2 cursor-pointer hover:text-white\">\n                      Technologies\n                    </div>\n                  </div>\n                </div>\n                \n                {/* Industry column */}\n                <div className=\"flex flex-col\">\n                  <div className=\"[font-family:'Inter',Helvetica] font-bold text-white text-base mb-4 cursor-pointer\">\n                    Industry\n                  </div>\n                  <div className=\"flex flex-col\">\n                    <div className=\"[font-family:'Inter',Helvetica] font-normal text-[#69818d] text-sm mb-2 cursor-pointer hover:text-white\">\n                      Industrial\n                    </div>\n                    <div className=\"[font-family:'Inter',Helvetica] font-normal text-[#69818d] text-sm mb-2 cursor-pointer hover:text-white\">\n                      Agriculture\n                    </div>\n                    <div className=\"[font-family:'Inter',Helvetica] font-normal text-[#69818d] text-sm mb-2 cursor-pointer hover:text-white\">\n                      Building\n                    </div>\n                    <div className=\"[font-family:'Inter',Helvetica] font-normal text-[#69818d] text-sm mb-2 cursor-pointer hover:text-white\">\n                      Security\n                    </div>\n                    <div className=\"[font-family:'Inter',Helvetica] font-normal text-[#69818d] text-sm mb-2 cursor-pointer hover:text-white\">\n                      Energy\n                    </div>\n                  </div>\n                </div>\n                \n                {/* Investors column */}\n                <div className=\"flex flex-col\">\n                  <div className=\"[font-family:'Inter',Helvetica] font-bold text-white text-base mb-4 cursor-pointer\">\n                    Investors\n                  </div>\n                  <div className=\"flex flex-col\">\n                    <div className=\"[font-family:'Inter',Helvetica] font-normal text-[#69818d] text-sm mb-2 cursor-pointer hover:text-white\">\n                      Projects\n                    </div>\n                    <div className=\"[font-family:'Inter',Helvetica] font-normal text-[#69818d] text-sm mb-2 cursor-pointer hover:text-white\">\n                      Finance\n                    </div>\n                    <div className=\"[font-family:'Inter',Helvetica] font-normal text-[#69818d] text-sm mb-2 cursor-pointer hover:text-white\">\n                      Statements\n                    </div>\n                    <div className=\"[font-family:'Inter',Helvetica] font-normal text-[#69818d] text-sm mb-2 cursor-pointer hover:text-white\">\n                      Projections\n                    </div>\n                  </div>\n                </div>\n                \n                {/* Company column */}\n                <div className=\"flex flex-col\">\n                  <div className=\"[font-family:'Inter',Helvetica] font-bold text-white text-base mb-4 cursor-pointer\">\n                    Company\n                  </div>\n                  <div className=\"flex flex-col\">\n                    <div className=\"[font-family:'Inter',Helvetica] font-normal text-[#69818d] text-sm mb-2 cursor-pointer hover:text-white\">\n                      Purpose\n                    </div>\n                    <div className=\"[font-family:'Inter',Helvetica] font-normal text-[#69818d] text-sm mb-2 cursor-pointer hover:text-white\">\n                      Innovation\n                    </div>\n                    <div className=\"[font-family:'Inter',Helvetica] font-normal text-[#69818d] text-sm mb-2 cursor-pointer hover:text-white\">\n                      Partners\n                    </div>\n                    <div className=\"[font-family:'Inter',Helvetica] font-normal text-[#69818d] text-sm mb-2 cursor-pointer hover:text-white\">\n                      Carrier\n                    </div>\n                    <div className=\"[font-family:'Inter',Helvetica] font-normal text-[#69818d] text-sm mb-2 cursor-pointer hover:text-white\">\n                      Affiliate\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n            \n            {/* Bottom section - Footer links */}\n            <div className=\"border-t border-[#2c4a52] pt-4 mt-12\">\n              <div className=\"flex justify-between items-center\">\n                <div className=\"flex gap-5\">\n                  <span className=\"[font-family:'Inter',Helvetica] font-normal text-[#69818d] text-xs underline cursor-pointer hover:text-white\">\n                    Privacy policy\n                  </span>\n                  <span className=\"[font-family:'Inter',Helvetica] font-normal text-[#69818d] text-xs underline cursor-pointer hover:text-white\">\n                    Term of Service\n                  </span>\n                  <span className=\"[font-family:'Inter',Helvetica] font-normal text-[#69818d] text-xs underline cursor-pointer hover:text-white\">\n                    Accessibility\n                  </span>\n                  <span className=\"[font-family:'Inter',Helvetica] font-normal text-[#69818d] text-xs underline cursor-pointer hover:text-white\">\n                    Contact\n                  </span>\n                  <span className=\"[font-family:'Inter',Helvetica] font-normal text-[#69818d] text-xs underline cursor-pointer hover:text-white\">\n                    Legal\n                  </span>\n                </div>\n                <div className=\"[font-family:'Inter',Helvetica] font-normal text-[#69818d] text-xs\">\n                  2024 eaneer .all right reserved\n                </div>\n              </div>\n            </div>\n          </div>\n        </footer>\n\n      </div>\n    </div>\n  );\n};\n","size_bytes":72491},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import { Slot } from \"@radix-ui/react-slot\";\nimport { type VariantProps, cva } from \"class-variance-authority\";\nimport * as React from \"react\";\nimport { cn } from \"../../lib/utils\";\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2\",\n        sm: \"h-8 rounded-md px-3 text-xs\",\n        lg: \"h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n);\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\";\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    );\n  },\n);\nButton.displayName = \"Button\";\n\nexport { Button, buttonVariants };\n","size_bytes":1918},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\";\nimport { cn } from \"../../lib/utils\";\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-xl border bg-card text-card-foreground shadow\",\n      className,\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\";\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\";\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"font-semibold leading-none tracking-tight\", className)}\n    {...props}\n  />\n));\nCardTitle.displayName = \"CardTitle\";\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\";\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n));\nCardContent.displayName = \"CardContent\";\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n));\nCardFooter.displayName = \"CardFooter\";\n\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n};\n","size_bytes":1860},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\";\nimport { cn } from \"../../lib/utils\";\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-base shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className,\n        )}\n        ref={ref}\n        {...props}\n      />\n    );\n  },\n);\nInput.displayName = \"Input\";\n\nexport { Input };\n","size_bytes":779},"client/src/components/ui/label.tsx":{"content":"import * as LabelPrimitive from \"@radix-ui/react-label\";\nimport { type VariantProps, cva } from \"class-variance-authority\";\nimport * as React from \"react\";\nimport { cn } from \"../../lib/utils\";\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\",\n);\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n));\nLabel.displayName = LabelPrimitive.Root.displayName;\n\nexport { Label };\n","size_bytes":722},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\";\nimport { CircleIcon } from \"lucide-react\";\nimport * as React from \"react\";\nimport { cn } from \"../../lib/utils\";\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  );\n});\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName;\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary shadow focus:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50\",\n        className,\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <CircleIcon className=\"h-3.5 w-3.5 fill-white\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  );\n});\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName;\n\nexport { RadioGroup, RadioGroupItem };\n","size_bytes":1431},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/mobile-wizard/ContactFooterSection.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\n\nexport function ContactFooterSection() {\n  return (\n    <>\n      {/* Contact Section */}\n      <section className=\"px-4 py-12 bg-[#06141b]\">\n        <div className=\"max-w-md mx-auto\">\n          <div className=\"bg-white rounded-3xl p-8 shadow-sm border border-gray-200\">\n            <div className=\"mb-6\">\n              <p className=\"text-gray-500 text-sm font-medium mb-3\">\n                Contact us today!\n              </p>\n              <h2 className=\"text-gray-900 text-2xl font-semibold leading-tight\">\n                Have questions about our services or ready to start your project?\n              </h2>\n            </div>\n            \n            <div className=\"space-y-4\">\n              <Input\n                type=\"email\"\n                placeholder=\"Type your email\"\n                className=\"w-full px-4 py-3 rounded-xl border border-gray-200 bg-white text-gray-900 placeholder:text-gray-400 focus:border-[#06141b] focus:ring-1 focus:ring-[#06141b]\"\n                data-testid=\"input-contact-email\"\n              />\n              <Button className=\"w-full bg-[#06141b] text-white py-3 rounded-xl hover:bg-[#06141b]/90 font-medium\">\n                Get started\n              </Button>\n            </div>\n          </div>\n        </div>\n      </section>\n\n    </>\n  );\n}","size_bytes":1379},"client/src/components/mobile-wizard/MobileCalculator.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Label } from \"@/components/ui/label\";\n\ninterface MobileCalculatorProps {\n  onCalculate: () => void;\n}\n\nexport function MobileCalculator({ onCalculate }: MobileCalculatorProps) {\n  const [selectedGridType, setSelectedGridType] = useState(\"three-phase\");\n  const [selectedInstallationType, setSelectedInstallationType] = useState(\"offgrid\");\n  const [powerUsage, setPowerUsage] = useState(\"\");\n\n  const gridTypeOptions = [\n    {\n      id: \"three-phase\",\n      label: \"Tree Phase\",\n      description: \"Perfect For High Power Usage\"\n    },\n    {\n      id: \"single-phase\", \n      label: \"Single Phase\",\n      description: \"Perfect For Low Power Usage\"\n    }\n  ];\n\n  const installationTypeOptions = [\n    {\n      id: \"ongrid\",\n      label: \"Ongrid\",\n      description: \"Check Me If You Have Grid\"\n    },\n    {\n      id: \"offgrid\",\n      label: \"Offgrid\", \n      description: \"Check Me If You Have No Energy Source\"\n    },\n    {\n      id: \"hybrid\",\n      label: \"Hybrid\",\n      description: \"I'm Adapted To All Other Energies\"\n    }\n  ];\n\n  const handleCalculate = () => {\n    if (!powerUsage || powerUsage.trim() === \"\" || parseFloat(powerUsage) <= 0) {\n      alert(\"Please enter a valid power usage amount before calculating.\");\n      return;\n    }\n    onCalculate();\n  };\n\n  return (\n    <div className=\"max-w-md mx-auto bg-gradient-to-b from-[#0a1f26] via-[#132e35] to-[#0a1f26] rounded-3xl p-6 shadow-2xl border border-gray-600\">\n      {/* Grid Type */}\n      <div className=\"mb-8\">\n        <h3 className=\"text-white text-xl font-bold mb-6\">Grid Type</h3>\n        <RadioGroup\n          value={selectedGridType}\n          onValueChange={setSelectedGridType}\n          className=\"space-y-4\"\n        >\n          {gridTypeOptions.map((option) => (\n            <div key={option.id} className=\"relative\">\n              <Label\n                htmlFor={option.id}\n                className={`block w-full p-4 rounded-2xl border-2 cursor-pointer transition-all duration-200 ${\n                  selectedGridType === option.id\n                    ? \"border-white bg-[#0a1f26]\"\n                    : \"border-gray-600 bg-[#0a1f26] hover:border-gray-400\"\n                }`}\n              >\n                <div className=\"flex items-start\">\n                  <RadioGroupItem\n                    value={option.id}\n                    id={option.id}\n                    className=\"mt-1 mr-3 border-white data-[state=checked]:bg-white data-[state=checked]:border-white\"\n                  />\n                  <div>\n                    <div className=\"text-white font-bold text-lg mb-1\">{option.label}</div>\n                    <div className=\"text-gray-300 text-sm\">{option.description}</div>\n                  </div>\n                </div>\n              </Label>\n            </div>\n          ))}\n        </RadioGroup>\n      </div>\n\n      {/* Installation Type */}\n      <div className=\"mb-8\">\n        <h3 className=\"text-white text-xl font-bold mb-6\">Installation Type</h3>\n        <RadioGroup\n          value={selectedInstallationType}\n          onValueChange={setSelectedInstallationType}\n          className=\"space-y-4\"\n        >\n          {installationTypeOptions.map((option) => (\n            <div key={option.id} className=\"relative\">\n              <Label\n                htmlFor={option.id}\n                className={`block w-full p-4 rounded-2xl border-2 cursor-pointer transition-all duration-200 ${\n                  selectedInstallationType === option.id\n                    ? \"border-white bg-[#0a1f26]\"\n                    : \"border-gray-600 bg-[#0a1f26] hover:border-gray-400\"\n                }`}\n              >\n                <div className=\"flex items-start\">\n                  <RadioGroupItem\n                    value={option.id}\n                    id={option.id}\n                    className=\"mt-1 mr-3 border-white data-[state=checked]:bg-white data-[state=checked]:border-white\"\n                  />\n                  <div>\n                    <div className=\"text-white font-bold text-lg mb-1\">{option.label}</div>\n                    <div className=\"text-gray-300 text-sm\">{option.description}</div>\n                  </div>\n                </div>\n              </Label>\n            </div>\n          ))}\n        </RadioGroup>\n      </div>\n\n      {/* Power Usage */}\n      <div className=\"mb-8\">\n        <h3 className=\"text-white text-xl font-bold mb-6\">Power usage</h3>\n        <div className=\"relative\">\n          <Input\n            type=\"number\"\n            placeholder=\"0.00\"\n            value={powerUsage}\n            onChange={(e) => setPowerUsage(e.target.value)}\n            className=\"w-full px-6 py-4 rounded-2xl border-2 border-gray-600 bg-[#0a1f26] text-white placeholder:text-gray-400 focus:border-white focus:ring-0 text-lg\"\n            data-testid=\"input-power-usage\"\n          />\n          <div className=\"absolute right-6 top-1/2 transform -translate-y-1/2 text-gray-400 text-lg font-medium pointer-events-none\">\n            Watts\n          </div>\n        </div>\n      </div>\n\n      {/* Calculate Button */}\n      <Button\n        onClick={handleCalculate}\n        className=\"w-full bg-white text-black py-4 rounded-2xl hover:bg-gray-100 font-bold text-lg\"\n        data-testid=\"button-calculate-mobile\"\n      >\n        Calculate\n      </Button>\n    </div>\n  );\n}","size_bytes":5502},"client/src/components/mobile-wizard/MobileWizard.tsx":{"content":"import { useState } from \"react\";\nimport { Step1Results } from \"./Step1Results\";\nimport { Step2PersonalInfo } from \"./Step2PersonalInfo\";\nimport { Step3PropertyInfo } from \"./Step3PropertyInfo\";\nimport { Step4EnergyStorage } from \"./Step4EnergyStorage\";\nimport { Step5Simulation } from \"./Step5Simulation\";\nimport { Step6Completion } from \"./Step6Completion\";\n\ninterface MobileWizardProps {\n  onBack: () => void;\n}\n\nexport function MobileWizard({ onBack }: MobileWizardProps) {\n  const [currentStep, setCurrentStep] = useState(1);\n\n  const handleNext = () => {\n    if (currentStep < 6) {\n      setCurrentStep(currentStep + 1);\n    }\n  };\n\n  const handlePrevious = () => {\n    if (currentStep > 1) {\n      setCurrentStep(currentStep - 1);\n    } else {\n      onBack();\n    }\n  };\n\n  const handleBackToMain = () => {\n    onBack();\n  };\n\n  const handleConfirm = () => {\n    // Final confirmation - could redirect or show success message\n    onBack();\n  };\n\n  switch (currentStep) {\n    case 1:\n      return <Step1Results onNext={handleNext} onBack={handleBackToMain} />;\n    case 2:\n      return <Step2PersonalInfo onNext={handleNext} onBack={handlePrevious} />;\n    case 3:\n      return <Step3PropertyInfo onNext={handleNext} onBack={handlePrevious} />;\n    case 4:\n      return <Step4EnergyStorage onNext={handleNext} onBack={handlePrevious} />;\n    case 5:\n      return <Step5Simulation onNext={handleNext} onBack={handlePrevious} />;\n    case 6:\n      return <Step6Completion onConfirm={handleConfirm} onBack={handleBackToMain} />;\n    default:\n      return <Step1Results onNext={handleNext} onBack={handleBackToMain} />;\n  }\n}","size_bytes":1627},"client/src/components/mobile-wizard/ProgressIndicator.tsx":{"content":"interface ProgressIndicatorProps {\n  currentStep: number;\n  totalSteps: number;\n}\n\nexport function ProgressIndicator({ currentStep, totalSteps }: ProgressIndicatorProps) {\n  return (\n    <div className=\"flex items-center justify-center py-8 px-4\">\n      <div className=\"flex items-center\">\n        {Array.from({ length: totalSteps }, (_, index) => {\n          const stepNumber = index + 1;\n          const isActive = stepNumber === currentStep;\n          const isCompleted = stepNumber < currentStep;\n          \n          return (\n            <div key={stepNumber} className=\"flex items-center\">\n              <div className=\"relative\">\n                {isActive ? (\n                  <div className=\"w-8 h-8 bg-white rounded-full flex items-center justify-center\">\n                    <div className=\"w-2 h-2 bg-black rounded-full\"></div>\n                  </div>\n                ) : (\n                  <div className=\"w-8 h-8 bg-gray-700 rounded-full flex items-center justify-center text-xs font-bold text-white\">\n                    {stepNumber}\n                  </div>\n                )}\n              </div>\n              {stepNumber < totalSteps && (\n                <div className=\"w-4 h-px bg-gray-600 mx-1\"></div>\n              )}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}","size_bytes":1317},"client/src/components/mobile-wizard/Step1Results.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { ProgressIndicator } from \"./ProgressIndicator\";\n\ninterface Step1ResultsProps {\n  onNext: () => void;\n  onBack: () => void;\n}\n\nexport function Step1Results({ onNext, onBack }: Step1ResultsProps) {\n  return (\n    <div className=\"min-h-screen bg-[#06141b] text-white\">\n      <ProgressIndicator currentStep={1} totalSteps={6} />\n      \n      <div className=\"px-4 py-8\">\n        {/* Recommendation Card */}\n        <div className=\"bg-[#0a1b23] border-2 border-white rounded-3xl p-6 mb-8 max-w-md mx-auto\">\n          <div className=\"mb-4\">\n            <p className=\"text-gray-300 text-sm mb-2\">Recommended</p>\n            <h2 className=\"text-white text-xl font-bold\">\n              20.00kW Solar Power + 5kWh Storage\n            </h2>\n          </div>\n          \n          <div className=\"mb-4\">\n            <h3 className=\"text-white font-bold mb-2\">6% Offset + 1 Hours Avg Backup</h3>\n            <p className=\"text-gray-300 text-sm\">\n              Estimated System Size Based On Your Reported Electricity Use\n            </p>\n          </div>\n        </div>\n\n        {/* Main Content */}\n        <div className=\"max-w-md mx-auto text-center mb-8\">\n          <h1 className=\"text-white text-3xl font-bold mb-6\">\n            You're Almost There...\n          </h1>\n          <p className=\"text-white text-lg leading-relaxed\">\n            You've Seen What Solar Can Do For You\n            <br />\n            Now Let Us Take Care Of The Rest\n          </p>\n        </div>\n\n        {/* Buttons */}\n        <div className=\"max-w-md mx-auto space-y-4\">\n          <Button\n            onClick={onNext}\n            className=\"w-full bg-transparent border-2 border-white text-white py-3 rounded-full hover:bg-white/10 font-medium\"\n            data-testid=\"button-whats-next\"\n          >\n            What's Next\n          </Button>\n          \n          <Button\n            onClick={onBack}\n            variant=\"link\"\n            className=\"w-full text-white hover:text-gray-300 font-medium\"\n            data-testid=\"button-back-to-main\"\n          >\n            Back to the main\n          </Button>\n        </div>\n\n      </div>\n    </div>\n  );\n}","size_bytes":2184},"client/src/components/mobile-wizard/Step2PersonalInfo.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { ProgressIndicator } from \"./ProgressIndicator\";\n\ninterface Step2PersonalInfoProps {\n  onNext: () => void;\n  onBack: () => void;\n}\n\nexport function Step2PersonalInfo({ onNext, onBack }: Step2PersonalInfoProps) {\n  return (\n    <div className=\"min-h-screen bg-[#06141b] text-white\">\n      <ProgressIndicator currentStep={2} totalSteps={6} />\n      \n      <div className=\"px-4 py-8\">\n        {/* Recommendation Card */}\n        <div className=\"bg-[#0a1b23] border-2 border-white rounded-3xl p-6 mb-8 max-w-md mx-auto\">\n          <div className=\"mb-4\">\n            <p className=\"text-gray-300 text-sm mb-2\">Recommended</p>\n            <h2 className=\"text-white text-xl font-bold\">\n              20.00kW Solar Power + 5kWh Storage\n            </h2>\n          </div>\n          \n          <div className=\"mb-4\">\n            <h3 className=\"text-white font-bold mb-2\">6% Offset + 1 Hours Avg Backup</h3>\n            <p className=\"text-gray-300 text-sm\">\n              Estimated System Size Based On Your Reported Electricity Use\n            </p>\n          </div>\n        </div>\n\n        {/* Main Content */}\n        <div className=\"max-w-md mx-auto mb-8\">\n          <h1 className=\"text-white text-3xl font-bold mb-6\">\n            You're Almost There...\n          </h1>\n          <p className=\"text-white text-lg mb-8\">\n            Enter your personal information\n          </p>\n\n          {/* Form Fields */}\n          <div className=\"space-y-4 mb-8\">\n            <Input\n              type=\"text\"\n              placeholder=\"Full name\"\n              className=\"w-full px-4 py-4 rounded-full border-2 border-white bg-transparent text-white placeholder:text-gray-400 focus:border-white focus:ring-0\"\n              data-testid=\"input-full-name\"\n            />\n            \n            <Input\n              type=\"tel\"\n              placeholder=\"Phone number\"\n              className=\"w-full px-4 py-4 rounded-full border-2 border-white bg-transparent text-white placeholder:text-gray-400 focus:border-white focus:ring-0\"\n              data-testid=\"input-phone-number\"\n            />\n            \n            <Input\n              type=\"text\"\n              placeholder=\"Home address\"\n              className=\"w-full px-4 py-4 rounded-full border-2 border-white bg-transparent text-white placeholder:text-gray-400 focus:border-white focus:ring-0\"\n              data-testid=\"input-home-address\"\n            />\n          </div>\n\n          <Button\n            onClick={onBack}\n            variant=\"link\"\n            className=\"text-white hover:text-gray-300 font-medium mb-8\"\n            data-testid=\"button-previous\"\n          >\n            Previous\n          </Button>\n        </div>\n\n        {/* Buttons */}\n        <div className=\"max-w-md mx-auto space-y-4\">\n          <Button\n            onClick={onNext}\n            className=\"w-full bg-transparent border-2 border-white text-white py-3 rounded-full hover:bg-white/10 font-medium\"\n            data-testid=\"button-next\"\n          >\n            Next\n          </Button>\n          \n          <Button\n            onClick={onBack}\n            variant=\"link\"\n            className=\"w-full text-white hover:text-gray-300 font-medium\"\n            data-testid=\"button-back-to-main\"\n          >\n            Back to the main\n          </Button>\n        </div>\n\n      </div>\n    </div>\n  );\n}","size_bytes":3422},"client/src/components/mobile-wizard/Step3PropertyInfo.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { ProgressIndicator } from \"./ProgressIndicator\";\n\ninterface Step3PropertyInfoProps {\n  onNext: () => void;\n  onBack: () => void;\n}\n\nexport function Step3PropertyInfo({ onNext, onBack }: Step3PropertyInfoProps) {\n  return (\n    <div className=\"min-h-screen bg-[#06141b] text-white\">\n      <ProgressIndicator currentStep={3} totalSteps={6} />\n      \n      <div className=\"px-4 py-8\">\n        {/* Recommendation Card */}\n        <div className=\"bg-[#0a1b23] border-2 border-white rounded-3xl p-6 mb-8 max-w-md mx-auto\">\n          <div className=\"mb-4\">\n            <p className=\"text-gray-300 text-sm mb-2\">Recommended</p>\n            <h2 className=\"text-white text-xl font-bold\">\n              20.00kW Solar Power + 5kWh Storage\n            </h2>\n          </div>\n          \n          <div className=\"mb-4\">\n            <h3 className=\"text-white font-bold mb-2\">6% Offset + 1 Hours Avg Backup</h3>\n            <p className=\"text-gray-300 text-sm\">\n              Estimated System Size Based On Your Reported Electricity Use\n            </p>\n          </div>\n        </div>\n\n        {/* Main Content */}\n        <div className=\"max-w-md mx-auto mb-8\">\n          <h1 className=\"text-white text-3xl font-bold mb-6\">\n            You're Almost There...\n          </h1>\n          <p className=\"text-white text-lg mb-8\">\n            Enter your property information\n          </p>\n\n          {/* Form Fields */}\n          <div className=\"space-y-4 mb-8\">\n            <Input\n              type=\"text\"\n              placeholder=\"Property type\"\n              className=\"w-full px-4 py-4 rounded-full border-2 border-white bg-transparent text-white placeholder:text-gray-400 focus:border-white focus:ring-0\"\n              data-testid=\"input-property-type\"\n            />\n            \n            <Input\n              type=\"text\"\n              placeholder=\"Humidity index\"\n              className=\"w-full px-4 py-4 rounded-full border-2 border-white bg-transparent text-white placeholder:text-gray-400 focus:border-white focus:ring-0\"\n              data-testid=\"input-humidity-index\"\n            />\n            \n            <Input\n              type=\"text\"\n              placeholder=\"How much sunlight does your roof get?\"\n              className=\"w-full px-4 py-4 rounded-full border-2 border-white bg-transparent text-white placeholder:text-gray-400 focus:border-white focus:ring-0\"\n              data-testid=\"input-roof-sunlight\"\n            />\n          </div>\n\n          <Button\n            onClick={onBack}\n            variant=\"link\"\n            className=\"text-white hover:text-gray-300 font-medium mb-8\"\n            data-testid=\"button-previous\"\n          >\n            Previous\n          </Button>\n        </div>\n\n        {/* Buttons */}\n        <div className=\"max-w-md mx-auto space-y-4\">\n          <Button\n            onClick={onNext}\n            className=\"w-full bg-transparent border-2 border-white text-white py-3 rounded-full hover:bg-white/10 font-medium\"\n            data-testid=\"button-next\"\n          >\n            Next\n          </Button>\n          \n          <Button\n            onClick={onBack}\n            variant=\"link\"\n            className=\"w-full text-white hover:text-gray-300 font-medium\"\n            data-testid=\"button-back-to-main\"\n          >\n            Back to the main\n          </Button>\n        </div>\n\n      </div>\n    </div>\n  );\n}","size_bytes":3461},"client/src/components/mobile-wizard/Step4EnergyStorage.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { ProgressIndicator } from \"./ProgressIndicator\";\n\ninterface Step4EnergyStorageProps {\n  onNext: () => void;\n  onBack: () => void;\n}\n\nexport function Step4EnergyStorage({ onNext, onBack }: Step4EnergyStorageProps) {\n  return (\n    <div className=\"min-h-screen bg-[#06141b] text-white\">\n      <ProgressIndicator currentStep={4} totalSteps={6} />\n      \n      <div className=\"px-4 py-8\">\n        {/* Recommendation Card */}\n        <div className=\"bg-[#0a1b23] border-2 border-white rounded-3xl p-6 mb-8 max-w-md mx-auto\">\n          <div className=\"mb-4\">\n            <p className=\"text-gray-300 text-sm mb-2\">Recommended</p>\n            <h2 className=\"text-white text-xl font-bold\">\n              20.00kW Solar Power + 5kWh Storage\n            </h2>\n          </div>\n          \n          <div className=\"mb-4\">\n            <h3 className=\"text-white font-bold mb-2\">6% Offset + 1 Hours Avg Backup</h3>\n            <p className=\"text-gray-300 text-sm\">\n              Estimated System Size Based On Your Reported Electricity Use\n            </p>\n          </div>\n        </div>\n\n        {/* Main Content */}\n        <div className=\"max-w-md mx-auto mb-8\">\n          <h1 className=\"text-white text-3xl font-bold mb-6\">\n            You're Almost There...\n          </h1>\n          <p className=\"text-white text-lg mb-8\">\n            Energy storage options\n          </p>\n\n          {/* Form Fields */}\n          <div className=\"space-y-4 mb-8\">\n            <Input\n              type=\"text\"\n              placeholder=\"Storage mode\"\n              className=\"w-full px-4 py-4 rounded-full border-2 border-white bg-transparent text-white placeholder:text-gray-400 focus:border-white focus:ring-0\"\n              data-testid=\"input-storage-mode\"\n            />\n            \n            <Input\n              type=\"text\"\n              placeholder=\"Maintenance service\"\n              className=\"w-full px-4 py-4 rounded-full border-2 border-white bg-transparent text-white placeholder:text-gray-400 focus:border-white focus:ring-0\"\n              data-testid=\"input-maintenance-service\"\n            />\n            \n            <Input\n              type=\"text\"\n              placeholder=\"How many hours of back up you want?\"\n              className=\"w-full px-4 py-4 rounded-full border-2 border-white bg-transparent text-white placeholder:text-gray-400 focus:border-white focus:ring-0\"\n              data-testid=\"input-backup-hours\"\n            />\n          </div>\n\n          <Button\n            onClick={onBack}\n            variant=\"link\"\n            className=\"text-white hover:text-gray-300 font-medium mb-8\"\n            data-testid=\"button-previous\"\n          >\n            Previous\n          </Button>\n        </div>\n\n        {/* Buttons */}\n        <div className=\"max-w-md mx-auto space-y-4\">\n          <Button\n            onClick={onNext}\n            className=\"w-full bg-transparent border-2 border-white text-white py-3 rounded-full hover:bg-white/10 font-medium\"\n            data-testid=\"button-next\"\n          >\n            Next\n          </Button>\n          \n          <Button\n            onClick={onBack}\n            variant=\"link\"\n            className=\"w-full text-white hover:text-gray-300 font-medium\"\n            data-testid=\"button-back-to-main\"\n          >\n            Back to the main\n          </Button>\n        </div>\n\n      </div>\n    </div>\n  );\n}","size_bytes":3460},"client/src/components/mobile-wizard/Step5Simulation.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { ProgressIndicator } from \"./ProgressIndicator\";\n\ninterface Step5SimulationProps {\n  onNext: () => void;\n  onBack: () => void;\n}\n\nexport function Step5Simulation({ onNext, onBack }: Step5SimulationProps) {\n  return (\n    <div className=\"min-h-screen bg-[#06141b] text-white\">\n      <ProgressIndicator currentStep={5} totalSteps={6} />\n      \n      <div className=\"px-4 py-8\">\n        {/* Recommendation Card */}\n        <div className=\"bg-[#0a1b23] border-2 border-white rounded-3xl p-6 mb-8 max-w-md mx-auto\">\n          <div className=\"mb-4\">\n            <p className=\"text-gray-300 text-sm mb-2\">Recommended</p>\n            <h2 className=\"text-white text-xl font-bold\">\n              20.00kW Solar Power + 5kWh Storage\n            </h2>\n          </div>\n          \n          <div className=\"mb-4\">\n            <h3 className=\"text-white font-bold mb-2\">6% Offset + 1 Hours Avg Backup</h3>\n            <p className=\"text-gray-300 text-sm\">\n              Estimated System Size Based On Your Reported Electricity Use\n            </p>\n          </div>\n        </div>\n\n        {/* Simulation Content */}\n        <div className=\"max-w-md mx-auto mb-8\">\n          <h1 className=\"text-white text-3xl font-bold mb-8 text-center\">\n            This Is Your Simulation\n          </h1>\n\n          {/* Cost Breakdown */}\n          <div className=\"space-y-4 mb-8\">\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-white text-lg\">Estimated cost</span>\n              <span className=\"text-white text-lg font-bold\">40.500.00DH</span>\n            </div>\n            \n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-white text-lg\">Annual savings</span>\n              <span className=\"text-white text-lg font-bold\">4.500DH/y</span>\n            </div>\n            \n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-white text-lg\">Payback period</span>\n              <span className=\"text-white text-lg font-bold\">9 years</span>\n            </div>\n            \n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-white text-lg\">Installation time</span>\n              <span className=\"text-white text-lg font-bold\">30Hour</span>\n            </div>\n          </div>\n        </div>\n\n        {/* Buttons */}\n        <div className=\"max-w-md mx-auto space-y-4\">\n          <Button\n            onClick={onNext}\n            className=\"w-full bg-transparent border-2 border-white text-white py-3 rounded-full hover:bg-white/10 font-medium\"\n            data-testid=\"button-confirm\"\n          >\n            Confirm\n          </Button>\n          \n          <Button\n            onClick={onBack}\n            variant=\"link\"\n            className=\"w-full text-white hover:text-gray-300 font-medium\"\n            data-testid=\"button-back-to-main\"\n          >\n            Back to the main\n          </Button>\n        </div>\n\n      </div>\n    </div>\n  );\n}","size_bytes":3072},"client/src/components/mobile-wizard/Step6Completion.tsx":{"content":"import { Button } from \"@/components/ui/button\";\n\ninterface Step6CompletionProps {\n  onConfirm: () => void;\n  onBack: () => void;\n}\n\nexport function Step6Completion({ onConfirm, onBack }: Step6CompletionProps) {\n  return (\n    <div className=\"min-h-screen bg-[#06141b] text-white\">\n      <div className=\"px-4 py-16\">\n        {/* Main Content */}\n        <div className=\"max-w-md mx-auto text-center mb-16\">\n          <h1 className=\"text-white text-4xl font-bold mb-8\">\n            All Done\n          </h1>\n\n          {/* Checkmark Circle */}\n          <div className=\"w-20 h-20 bg-white rounded-full flex items-center justify-center mx-auto mb-8\">\n            <svg width=\"32\" height=\"32\" viewBox=\"0 0 24 24\" fill=\"none\" className=\"text-black\">\n              <path d=\"M9 12l2 2 4-4\" stroke=\"currentColor\" strokeWidth=\"3\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\n            </svg>\n          </div>\n\n          <h2 className=\"text-white text-xl font-bold mb-6\">\n            We'll be in touch shortly!\n          </h2>\n\n          <p className=\"text-white text-base leading-relaxed mb-6\">\n            Thank you for your patience our eaneer energetics team will contact you soon. You'll receive a WhatsApp message with your personalized solar offer.\n          </p>\n\n          <p className=\"text-white text-lg font-bold\">\n            Together, we're building a brighter,<br />\n            greener Morocco.\n          </p>\n        </div>\n\n        {/* Buttons */}\n        <div className=\"max-w-md mx-auto space-y-4\">\n          <Button\n            onClick={onConfirm}\n            className=\"w-full bg-transparent border-2 border-white text-white py-3 rounded-full hover:bg-white/10 font-medium\"\n            data-testid=\"button-confirm-final\"\n          >\n            Confirm\n          </Button>\n          \n          <Button\n            onClick={onBack}\n            variant=\"link\"\n            className=\"w-full text-white hover:text-gray-300 font-medium\"\n            data-testid=\"button-back-to-main-final\"\n          >\n            Back to the main\n          </Button>\n        </div>\n\n      </div>\n    </div>\n  );\n}","size_bytes":2106},".local/state/replit/agent/progress_tracker.md":{"content":"[x] 1. Install the required packages\n[x] 2. Restart the workflow to see if the project is working\n[x] 3. Verify the project is working using the feedback tool\n[x] 4. Create Header and Footer components for desktop layout\n[x] 5. Update Step1Results component with desktop version while preserving mobile\n[x] 6. Fix DesktopStep1 component to show property information fields instead of personal information\n[x] 7. Fixed desktop calculator button navigation - Calculate button now properly shows desktop calculator interface\n[x] 8. Inform user the import is completed and they can start building, mark the import as completed using the complete_project_import tool","size_bytes":661},"client/src/components/Footer.tsx":{"content":"import React from 'react';\n\nexport function Footer() {\n  return (\n    <footer className=\"bg-[#06141b] border-t border-[#2c4a52] px-16 py-8\">\n      {/* Main Footer Content */}\n      <div className=\"max-w-6xl mx-auto\">\n        {/* Logo and Description */}\n        <div className=\"flex flex-col lg:flex-row justify-between items-start mb-8\">\n          <div className=\"mb-8 lg:mb-0 lg:max-w-md\">\n            <div className=\"flex items-center mb-4\">\n              <img\n                src=\"/attached_assets/logo.png\"\n                alt=\"eaneer logo\"\n                className=\"w-8 h-8 mr-3\"\n              />\n              <span className=\"text-xl font-medium text-white\">eaneer</span>\n            </div>\n            <p className=\"text-white text-sm font-medium mb-1\">\n              Contact Eaneer for Innovative Energy Solutions.\n            </p>\n            <p className=\"text-white text-sm mb-1\">\n              Transform Your Vision into Reality with Speed,\n            </p>\n            <p className=\"text-white text-sm\">\n              Efficiency and Savings.\n            </p>\n          </div>\n\n          {/* Navigation Links */}\n          <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-8 lg:gap-12\">\n            <div>\n              <h4 className=\"text-white font-bold text-sm mb-3\">Home</h4>\n              <div className=\"space-y-2\">\n                <div className=\"text-gray-400 text-xs hover:text-white cursor-pointer\">About us</div>\n                <div className=\"text-gray-400 text-xs hover:text-white cursor-pointer\">Technologies</div>\n              </div>\n            </div>\n            \n            <div>\n              <h4 className=\"text-white font-bold text-sm mb-3\">Industry</h4>\n              <div className=\"space-y-2\">\n                <div className=\"text-gray-400 text-xs hover:text-white cursor-pointer\">Industrial</div>\n                <div className=\"text-gray-400 text-xs hover:text-white cursor-pointer\">Agriculture</div>\n                <div className=\"text-gray-400 text-xs hover:text-white cursor-pointer\">Building</div>\n              </div>\n            </div>\n            \n            <div>\n              <h4 className=\"text-white font-bold text-sm mb-3\">Investors</h4>\n              <div className=\"space-y-2\">\n                <div className=\"text-gray-400 text-xs hover:text-white cursor-pointer\">Projects</div>\n                <div className=\"text-gray-400 text-xs hover:text-white cursor-pointer\">Finance</div>\n                <div className=\"text-gray-400 text-xs hover:text-white cursor-pointer\">Statements</div>\n              </div>\n            </div>\n            \n            <div>\n              <h4 className=\"text-white font-bold text-sm mb-3\">Company</h4>\n              <div className=\"space-y-2\">\n                <div className=\"text-gray-400 text-xs hover:text-white cursor-pointer\">Purpose</div>\n                <div className=\"text-gray-400 text-xs hover:text-white cursor-pointer\">Innovation</div>\n                <div className=\"text-gray-400 text-xs hover:text-white cursor-pointer\">Partners</div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      {/* Bottom Links */}\n      <div className=\"border-t border-[#2c4a52] pt-4\">\n        <div className=\"max-w-6xl mx-auto flex flex-col lg:flex-row justify-between items-center\">\n          <div className=\"flex flex-wrap justify-center lg:justify-start gap-4 text-xs mb-4 lg:mb-0\">\n            <span className=\"text-gray-400 hover:text-white cursor-pointer\">Privacy policy</span>\n            <span className=\"text-gray-400 hover:text-white cursor-pointer\">Terms of Service</span>\n            <span className=\"text-gray-400 hover:text-white cursor-pointer\">Accessibility</span>\n            <span className=\"text-gray-400 hover:text-white cursor-pointer\">Contact</span>\n            <span className=\"text-gray-400 hover:text-white cursor-pointer\">Legal</span>\n          </div>\n          <div className=\"text-gray-400 text-xs\">\n            2024 eaneer. All rights reserved\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n}","size_bytes":4071},"client/src/components/Header.tsx":{"content":"import React from 'react';\n\nexport function Header() {\n  return (\n    <header className=\"w-full h-[86px] bg-[#06141b] shadow-[0px_0px_25px_#07151c] relative z-10\">\n      <div className=\"w-full h-full flex items-center px-16\">\n        <div className=\"flex items-center justify-between w-full\">\n          {/* Logo */}\n          <div className=\"flex items-center\">\n            <div className=\"w-8 h-8 mr-3 flex items-center justify-center bg-white rounded\">\n              <svg width=\"24\" height=\"24\" viewBox=\"0 0 20 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                <polygon points=\"0,0 10,0 10,10 0,10\" fill=\"black\"/>\n                <polygon points=\"10,0 20,0 20,10 15,10 15,15 10,15\" fill=\"black\"/>\n                <polygon points=\"0,10 15,10 15,20 0,20\" fill=\"black\"/>\n              </svg>\n            </div>\n            <span className=\"text-xl font-medium text-white\">\n              eaneer\n            </span>\n          </div>\n\n          {/* Center Navigation */}\n          <nav className=\"flex items-center space-x-8\">\n            <button className=\"flex items-center text-white text-sm font-medium hover:text-gray-300 transition-colors duration-200 focus:outline-none\">\n              Company\n              <svg className=\"w-3 h-3 ml-1\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\n              </svg>\n            </button>\n            <button className=\"flex items-center text-white text-sm font-medium hover:text-gray-300 transition-colors duration-200 focus:outline-none\">\n              Industry\n              <svg className=\"w-3 h-3 ml-1\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\n              </svg>\n            </button>\n            <button className=\"flex items-center text-white text-sm font-medium hover:text-gray-300 transition-colors duration-200 focus:outline-none\">\n              Services\n              <svg className=\"w-3 h-3 ml-1\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\n              </svg>\n            </button>\n            <button className=\"text-white text-sm font-medium hover:text-gray-300 transition-colors duration-200\">\n              Career\n            </button>\n          </nav>\n\n          {/* Contact Button */}\n          <div className=\"flex items-center\">\n            <button className=\"bg-transparent border border-white rounded-full px-6 py-2 text-white text-sm font-medium hover:bg-white hover:text-[#06141b] transition-all duration-300\">\n              Contact Us\n            </button>\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}","size_bytes":2859},"client/src/components/DesktopSolarInterface.tsx":{"content":"import React from 'react';\nimport { DesktopSolarFlow } from './desktop/DesktopSolarFlow';\n\ninterface DesktopSolarInterfaceProps {\n  onNext: () => void;\n  onBack: () => void;\n}\n\nexport function DesktopSolarInterface({ onNext, onBack }: DesktopSolarInterfaceProps) {\n  return <DesktopSolarFlow onBack={onBack} />;\n}","size_bytes":313},"client/src/components/desktop/DesktopSolarFlow.tsx":{"content":"import React, { useState } from 'react';\nimport { DesktopStep0 } from './DesktopStep0';\nimport { DesktopStep1 } from './DesktopStep1';\nimport { DesktopStep2 } from './DesktopStep2';\nimport { DesktopStep3 } from './DesktopStep3';\nimport { DesktopStep4 } from './DesktopStep4';\nimport { DesktopStep5 } from './DesktopStep5';\n\ninterface DesktopSolarFlowProps {\n  onBack: () => void;\n}\n\nexport function DesktopSolarFlow({ onBack }: DesktopSolarFlowProps) {\n  const [currentStep, setCurrentStep] = useState(0);\n\n  const handleNext = () => {\n    setCurrentStep(prev => prev + 1);\n  };\n\n  const handlePrevious = () => {\n    setCurrentStep(prev => prev - 1);\n  };\n\n  const handleRateExperience = () => {\n    // Navigate back to landing page\n    onBack();\n  };\n\n  return (\n    <>\n      {currentStep === 0 && (\n        <DesktopStep0 \n          onNext={handleNext}\n          onBack={onBack}\n        />\n      )}\n      {currentStep === 1 && (\n        <DesktopStep1 \n          onNext={handleNext}\n          onBack={onBack}\n        />\n      )}\n      {currentStep === 2 && (\n        <DesktopStep2 \n          onNext={handleNext}\n          onPrevious={handlePrevious}\n          onBack={onBack}\n        />\n      )}\n      {currentStep === 3 && (\n        <DesktopStep3 \n          onNext={handleNext}\n          onPrevious={handlePrevious}\n          onBack={onBack}\n        />\n      )}\n      {currentStep === 4 && (\n        <DesktopStep4 \n          onNext={handleNext}\n          onPrevious={handlePrevious}\n          onBack={onBack}\n        />\n      )}\n      {currentStep === 5 && (\n        <DesktopStep5 \n          onRateExperience={handleRateExperience}\n          onBack={onBack}\n        />\n      )}\n    </>\n  );\n}","size_bytes":1693},"client/src/components/desktop/DesktopStep0.tsx":{"content":"import React from 'react';\nimport { ArrowRight } from 'lucide-react';\n\ninterface DesktopStep0Props {\n  onNext: () => void;\n  onBack: () => void;\n}\n\nexport function DesktopStep0({ onNext, onBack }: DesktopStep0Props) {\n  return (\n    <div className=\"min-h-screen flex flex-col justify-center items-center px-4\" style={{ backgroundColor: '#06141B' }}>\n      <div className=\"max-w-6xl w-full flex flex-col lg:flex-row items-center justify-center gap-12 lg:gap-24\">\n        \n        {/* Left Side Content */}\n        <div className=\"text-white text-center lg:text-left max-w-md\">\n          <h1 className=\"text-4xl lg:text-5xl font-bold mb-8 leading-tight\">\n            You're Almost There...\n          </h1>\n          \n          <div className=\"mb-8\">\n            <p className=\"text-lg lg:text-xl leading-relaxed\">\n              You've Seen What Solar Can Do For You<br />\n              Now Let Us Take Care Of The Rest\n            </p>\n          </div>\n          \n          <button \n            onClick={onNext}\n            className=\"bg-transparent border-2 border-white rounded-full px-8 py-3 flex items-center gap-3 hover:bg-white hover:text-[#06141B] transition-all duration-300 group mx-auto lg:mx-0\"\n            data-testid=\"button-what-next\"\n          >\n            <span className=\"font-medium\">What Next</span>\n            <ArrowRight className=\"w-5 h-5 group-hover:translate-x-1 transition-transform duration-300\" />\n          </button>\n        </div>\n\n        {/* Right Side - Recommendation Card */}\n        <div className=\"bg-transparent border-2 border-gray-600 rounded-2xl p-6 max-w-sm w-full\">\n          <div className=\"bg-gray-700 text-white text-sm px-3 py-1 rounded-md inline-block mb-4\">\n            Recommended\n          </div>\n          <h2 className=\"text-white text-xl font-bold mb-6\">\n            20.00kW Solar Power + 5kWh Storage\n          </h2>\n          <div className=\"space-y-2 mb-4\">\n            <p className=\"text-white font-medium\">\n              6% Offset + 1 Hours Avg Backup\n            </p>\n            <p className=\"text-gray-400 text-sm\">\n              Estimated System Size Based On Your Reported<br />\n              Electricity Use\n            </p>\n          </div>\n        </div>\n      </div>\n      \n      {/* Bottom Link */}\n      <div className=\"absolute bottom-8 left-1/2 transform -translate-x-1/2\">\n        <button \n          onClick={onBack}\n          className=\"text-white underline hover:no-underline transition-all duration-300\"\n          data-testid=\"button-back-to-main\"\n        >\n          Back to the main\n        </button>\n      </div>\n    </div>\n  );\n}","size_bytes":2607},"client/src/components/desktop/DesktopStep1.tsx":{"content":"import React, { useState } from 'react';\nimport { ArrowRight } from 'lucide-react';\n\ninterface DesktopStep1Props {\n  onNext: () => void;\n  onBack: () => void;\n}\n\nexport function DesktopStep1({ onNext, onBack }: DesktopStep1Props) {\n  const [formData, setFormData] = useState({\n    fullName: '',\n    phoneNumber: '',\n    homeAddress: ''\n  });\n\n  const handleInputChange = (field: string, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  const allFieldsFilled = \n    formData.fullName.trim() && \n    formData.phoneNumber.trim() && \n    formData.homeAddress.trim();\n\n  const handleNext = () => {\n    if (allFieldsFilled) {\n      onNext();\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col justify-center items-center px-4\" style={{ backgroundColor: '#06141B' }}>\n      <div className=\"max-w-6xl w-full flex flex-col lg:flex-row items-center justify-center gap-12 lg:gap-24\">\n        \n        {/* Left Side Content */}\n        <div className=\"text-white max-w-md\">\n          <h1 className=\"text-4xl lg:text-5xl font-bold mb-12 leading-tight\">\n            You're Almost There...\n          </h1>\n          \n          {/* Form Section */}\n          <div className=\"mb-8\">\n            <p className=\"text-lg mb-6\">Enter your personal information</p>\n            \n            {/* Form Fields */}\n            <div className=\"space-y-6 mb-10\">\n              {/* Full Name and Phone Number Row */}\n              <div className=\"flex gap-6\">\n                <input\n                  type=\"text\"\n                  placeholder=\"Full name\"\n                  value={formData.fullName}\n                  onChange={(e) => handleInputChange('fullName', e.target.value)}\n                  className=\"flex-1 bg-transparent border-2 rounded-full px-6 py-4 text-left text-white placeholder-gray-400 focus:outline-none focus:ring-0 transition-colors duration-300 relative z-10 border-gray-600\"\n                  data-testid=\"input-full-name\"\n                />\n                <input\n                  type=\"tel\"\n                  placeholder=\"Phone number\"\n                  value={formData.phoneNumber}\n                  onChange={(e) => handleInputChange('phoneNumber', e.target.value)}\n                  className=\"flex-1 bg-transparent border-2 rounded-full px-6 py-4 text-left text-white placeholder-gray-400 focus:outline-none focus:ring-0 transition-colors duration-300 relative z-10 border-gray-600 ml-[-16px] mr-[-16px]\"\n                  data-testid=\"input-phone-number\"\n                />\n              </div>\n              \n              {/* Home Address Full Width */}\n              <input\n                type=\"text\"\n                placeholder=\"Home address\"\n                value={formData.homeAddress}\n                onChange={(e) => handleInputChange('homeAddress', e.target.value)}\n                className=\"w-full bg-transparent border-2 rounded-full px-6 py-4 text-left text-white placeholder-gray-400 focus:outline-none focus:ring-0 transition-colors duration-300 relative z-10 border-gray-600\"\n                data-testid=\"input-home-address\"\n              />\n            </div>\n            \n            {/* Buttons Row */}\n            <div className=\"flex items-center justify-between mt-8\">\n              <button \n                onClick={onBack}\n                className=\"text-white underline hover:no-underline transition-all duration-300 relative z-10\"\n                data-testid=\"button-previous\"\n              >\n                Previous\n              </button>\n              \n              <button \n                onClick={handleNext}\n                className={`bg-transparent border-2 border-white rounded-full px-10 py-4 flex items-center gap-3 transition-all duration-300 group relative z-10\n                  ${allFieldsFilled \n                    ? 'hover:bg-white hover:text-[#06141B] cursor-pointer' \n                    : 'opacity-50 cursor-not-allowed'\n                  }`}\n                data-testid=\"button-next\"\n                disabled={!allFieldsFilled}\n              >\n                <span className=\"font-medium\">Next</span>\n                <ArrowRight className=\"w-5 h-5 group-hover:translate-x-1 transition-transform duration-300\" />\n              </button>\n            </div>\n          </div>\n        </div>\n\n        {/* Right Side - Recommendation Card */}\n        <div className=\"bg-transparent border-2 border-gray-600 rounded-2xl p-6 max-w-sm w-full text-left ml-[65px] mr-[65px] pt-[26px] pb-[26px] mt-[0px] mb-[0px]\">\n          <div className=\"bg-gray-700 text-white text-sm px-3 py-1 rounded-md inline-block mb-4\">\n            Recommended\n          </div>\n          <h2 className=\"text-white text-xl font-bold mb-6\">\n            20.00kW Solar Power + 5kWh Storage\n          </h2>\n          <div className=\"space-y-2 mb-4\">\n            <p className=\"text-white font-medium\">\n              6% Offset + 1 Hours Avg Backup\n            </p>\n            <p className=\"text-gray-400 text-sm\">\n              Estimated System Size Based On Your Reported<br />\n              Electricity Use\n            </p>\n          </div>\n        </div>\n      </div>\n      {/* Bottom Link */}\n      <div className=\"absolute bottom-8 left-1/2 transform -translate-x-1/2\">\n        <button \n          onClick={onBack}\n          className=\"text-white underline hover:no-underline transition-all duration-300\"\n          data-testid=\"button-back-to-main\"\n        >\n          Back to the main\n        </button>\n      </div>\n    </div>\n  );\n}","size_bytes":5505},"client/src/components/desktop/DesktopStep2.tsx":{"content":"import React, { useState } from \"react\";\nimport { ArrowRight } from \"lucide-react\";\nimport { Input } from \"../ui/input\";\n\ninterface DesktopStep2Props {\n  onNext: () => void;\n  onPrevious: () => void;\n  onBack: () => void;\n}\n\nexport function DesktopStep2({\n  onNext,\n  onPrevious,\n  onBack,\n}: DesktopStep2Props) {\n  const [formData, setFormData] = useState({\n    propertyType: \"\",\n    humidityIndex: \"\",\n    sunlightExposure: \"\",\n  });\n\n  const handleInputChange = (field: string, value: string) => {\n    setFormData((prev) => ({ ...prev, [field]: value }));\n  };\n\n  const allFieldsFilled =\n    formData.propertyType.trim() &&\n    formData.humidityIndex.trim() &&\n    formData.sunlightExposure.trim();\n\n  const handleNext = () => {\n    if (allFieldsFilled) {\n      onNext();\n    }\n  };\n\n  return (\n    <div\n      className=\"min-h-screen flex flex-col justify-center items-center px-4\"\n      style={{ backgroundColor: \"#06141B\" }}\n    >\n      <div className=\"max-w-6xl w-full flex flex-col lg:flex-row items-center justify-center gap-12 lg:gap-24\">\n        {/* Left Side Content */}\n        <div className=\"text-white max-w-md\">\n          <h1 className=\"text-4xl lg:text-5xl font-bold mb-8 leading-tight\">\n            You're Almost There...\n          </h1>\n\n          {/* Form Section */}\n          <div className=\"mb-8\">\n            <p className=\"text-lg mb-6\">Enter your property information</p>\n\n            {/* Form Fields */}\n            <div className=\"space-y-6 mb-10\">\n              {/* Property Type and Humidity Index Row */}\n              <div className=\"flex gap-6\">\n                <input\n                  type=\"text\"\n                  placeholder=\"Property type\"\n                  value={formData.propertyType}\n                  onChange={(e) => handleInputChange('propertyType', e.target.value)}\n                  className=\"flex-1 bg-transparent border-2 rounded-full px-6 py-4 text-left text-white placeholder-gray-400 focus:outline-none focus:ring-0 transition-colors duration-300 relative z-10 border-gray-600 focus:border-white\"\n                  data-testid=\"input-property-type\"\n                />\n                <input\n                  type=\"text\"\n                  placeholder=\"Humidity index\"\n                  value={formData.humidityIndex}\n                  onChange={(e) => handleInputChange('humidityIndex', e.target.value)}\n                  className=\"flex-1 bg-transparent border-2 rounded-full px-6 py-4 text-left text-white placeholder-gray-400 focus:outline-none focus:ring-0 transition-colors duration-300 relative z-10 border-gray-600 focus:border-white ml-[-10px] mr-[-10px]\"\n                  data-testid=\"input-humidity-index\"\n                />\n              </div>\n\n              {/* Sunlight Question Full Width */}\n              <input\n                type=\"text\"\n                placeholder=\"How much sunlight does your roof get?\"\n                value={formData.sunlightExposure}\n                onChange={(e) => handleInputChange('sunlightExposure', e.target.value)}\n                className=\"w-full bg-transparent border-2 rounded-full px-6 py-4 text-left text-white placeholder-gray-400 focus:outline-none focus:ring-0 transition-colors duration-300 relative z-10 border-gray-600 focus:border-white\"\n                data-testid=\"input-sunlight-exposure\"\n              />\n            </div>\n\n            {/* Buttons Row */}\n            <div className=\"flex items-center justify-between mt-8\">\n              <button\n                onClick={onPrevious}\n                className=\"text-white underline hover:no-underline transition-all duration-300 relative z-10\"\n                data-testid=\"input-previous\"\n              >\n                Previous\n              </button>\n\n              <button\n                onClick={handleNext}\n                className={`bg-transparent border-2 border-white rounded-full px-10 py-4 flex items-center gap-3 transition-all duration-300 group relative z-10\n                  ${\n                    allFieldsFilled\n                      ? \"hover:bg-white hover:text-[#06141B] cursor-pointer\"\n                      : \"opacity-50 cursor-not-allowed\"\n                  }`}\n                data-testid=\"button-next\"\n                disabled={!allFieldsFilled}\n              >\n                <span className=\"font-medium\">Next</span>\n                <ArrowRight className=\"w-5 h-5 group-hover:translate-x-1 transition-transform duration-300\" />\n              </button>\n            </div>\n          </div>\n        </div>\n\n        {/* Right Side - Recommendation Card */}\n        <div className=\"bg-transparent border-2 border-gray-600 rounded-2xl p-6 max-w-sm w-full ml-[78px] mr-[78px]\">\n          <div className=\"bg-gray-700 text-white text-sm px-3 py-1 rounded-md inline-block mb-4\">\n            Recommended\n          </div>\n          <h2 className=\"text-white text-xl font-bold mb-6\">\n            20.00kW Solar Power + 5kWh Storage\n          </h2>\n          <div className=\"space-y-2 mb-4\">\n            <p className=\"text-white font-medium\">\n              6% Offset + 1 Hours Avg Backup\n            </p>\n            <p className=\"text-gray-400 text-sm\">\n              Estimated System Size Based On Your Reported\n              <br />\n              Electricity Use\n            </p>\n          </div>\n        </div>\n      </div>\n      {/* Bottom Link */}\n      <div className=\"absolute bottom-8 left-1/2 transform -translate-x-1/2\">\n        <button\n          onClick={onBack}\n          className=\"text-white underline hover:no-underline transition-all duration-300\"\n          data-testid=\"button-back-to-main\"\n        >\n          Back to the main\n        </button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5678},"client/src/components/desktop/DesktopStep3.tsx":{"content":"import React, { useState } from \"react\";\nimport { ArrowRight } from \"lucide-react\";\n\ninterface DesktopStep3Props {\n  onNext: () => void;\n  onPrevious: () => void;\n  onBack: () => void;\n}\n\nexport function DesktopStep3({\n  onNext,\n  onPrevious,\n  onBack,\n}: DesktopStep3Props) {\n  const [formData, setFormData] = useState({\n    storageMode: \"\",\n    maintenanceService: \"\",\n    backupHours: \"\",\n  });\n\n  const handleInputChange = (field: string, value: string) => {\n    setFormData((prev) => ({ ...prev, [field]: value }));\n  };\n\n  const allFieldsFilled =\n    formData.storageMode.trim() && formData.maintenanceService.trim() && formData.backupHours.trim();\n\n  const handleNext = () => {\n    if (allFieldsFilled) {\n      onNext();\n    }\n  };\n\n  return (\n    <div\n      className=\"min-h-screen flex flex-col justify-center items-center px-4\"\n      style={{ backgroundColor: \"#06141B\" }}\n    >\n      <div className=\"max-w-6xl w-full flex flex-col lg:flex-row items-center justify-center gap-12 lg:gap-24\">\n        {/* Left Side Content */}\n        <div className=\"text-white max-w-md\">\n          <h1 className=\"text-4xl lg:text-5xl font-bold mb-8 leading-tight\">\n            You're Almost There...\n          </h1>\n\n          {/* Form Section */}\n          <div className=\"mb-8\">\n            <p className=\"text-lg mb-6\">Energy storage options</p>\n\n            {/* Form Fields */}\n            <div className=\"space-y-4 mb-6\">\n              {/* Storage Mode and Maintenance Service Row */}\n              <div className=\"flex gap-4\">\n                <input\n                  type=\"text\"\n                  placeholder=\"Storage mode\"\n                  value={formData.storageMode}\n                  onChange={(e) => handleInputChange('storageMode', e.target.value)}\n                  className=\"flex-1 bg-transparent border-2 rounded-full px-4 py-3 text-left text-white placeholder-gray-400 focus:outline-none focus:ring-0 transition-colors duration-300 border-gray-600 focus:border-white pl-[24px] pr-[24px] pt-[16px] pb-[16px]\"\n                  data-testid=\"input-storage-mode\"\n                />\n                <input\n                  type=\"text\"\n                  placeholder=\"Maintenance service\"\n                  value={formData.maintenanceService}\n                  onChange={(e) => handleInputChange('maintenanceService', e.target.value)}\n                  className=\"flex-1 bg-transparent border-2 rounded-full px-4 py-3 text-left text-white placeholder-gray-400 focus:outline-none focus:ring-0 transition-colors duration-300 border-gray-600 focus:border-white\"\n                  data-testid=\"input-maintenance-service\"\n                />\n              </div>\n\n              {/* Backup Hours Question Full Width */}\n              <input\n                type=\"text\"\n                placeholder=\"How many hours of back up you want?\"\n                value={formData.backupHours}\n                onChange={(e) => handleInputChange('backupHours', e.target.value)}\n                className=\"w-full bg-transparent border-2 rounded-full px-4 py-3 text-left text-white placeholder-gray-400 focus:outline-none focus:ring-0 transition-colors duration-300 border-gray-600 focus:border-white pl-[24px] pr-[24px] pt-[16px] pb-[16px]\"\n                data-testid=\"input-backup-hours\"\n              />\n            </div>\n\n            {/* Buttons Row */}\n            <div className=\"flex items-center justify-between\">\n              <button\n                onClick={onPrevious}\n                className=\"text-white underline hover:no-underline transition-all duration-300\"\n                data-testid=\"button-previous\"\n              >\n                Previous\n              </button>\n\n              <button\n                onClick={handleNext}\n                className={`bg-transparent border-2 border-white rounded-full px-8 py-3 flex items-center gap-3 transition-all duration-300 group\n                  ${\n                    allFieldsFilled\n                      ? \"hover:bg-white hover:text-[#06141B] cursor-pointer\"\n                      : \"opacity-50 cursor-not-allowed\"\n                  }`}\n                data-testid=\"button-next\"\n                disabled={!allFieldsFilled}\n              >\n                <span className=\"font-medium\">Next</span>\n                <ArrowRight className=\"w-5 h-5 group-hover:translate-x-1 transition-transform duration-300\" />\n              </button>\n            </div>\n          </div>\n        </div>\n\n        {/* Right Side - Recommendation Card */}\n        <div className=\"bg-transparent border-2 border-gray-600 rounded-2xl p-6 max-w-sm w-full ml-[70px] mr-[70px]\">\n          <div className=\"bg-gray-700 text-white text-sm px-3 py-1 rounded-md inline-block mb-4\">\n            Recommended\n          </div>\n          <h2 className=\"text-white text-xl font-bold mb-6\">\n            20.00kW Solar Power + 5kWh Storage\n          </h2>\n          <div className=\"space-y-2 mb-4\">\n            <p className=\"text-white font-medium\">\n              6% Offset + 1 Hours Avg Backup\n            </p>\n            <p className=\"text-gray-400 text-sm\">\n              Estimated System Size Based On Your Reported\n              <br />\n              Electricity Use\n            </p>\n          </div>\n        </div>\n      </div>\n      {/* Bottom Link */}\n      <div className=\"absolute bottom-8 left-1/2 transform -translate-x-1/2\">\n        <button\n          onClick={onBack}\n          className=\"text-white underline hover:no-underline transition-all duration-300\"\n          data-testid=\"button-back-to-main\"\n        >\n          Back to the main\n        </button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5611},"client/src/components/desktop/DesktopStep4.tsx":{"content":"import React, { useState } from 'react';\nimport { ArrowRight } from 'lucide-react';\n\ninterface DesktopStep4Props {\n  onNext: () => void;\n  onPrevious: () => void;\n  onBack: () => void;\n}\n\nexport function DesktopStep4({ onNext, onPrevious, onBack }: DesktopStep4Props) {\n  const [agreed, setAgreed] = useState(false);\n\n  const handleConfirm = () => {\n    if (agreed) {\n      onNext();\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col justify-center items-center px-4\" style={{ backgroundColor: '#06141B' }}>\n      <div className=\"max-w-6xl w-full flex flex-col lg:flex-row items-center justify-center gap-12 lg:gap-24\">\n        \n        {/* Left Side Content */}\n        <div className=\"text-white max-w-md\">\n          <h1 className=\"text-4xl lg:text-5xl font-bold mb-8 leading-tight\">\n            This Is Your Simulation\n          </h1>\n          \n          {/* Simulation Results */}\n          <div className=\"mb-8\">\n            <div className=\"space-y-4 mb-8\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-lg\">Estimated cost</span>\n                <span className=\"text-lg font-semibold\">40,500.00DH</span>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-lg\">Annual Savings</span>\n                <span className=\"text-lg font-semibold\">4,500DH/y</span>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-lg\">Payback period</span>\n                <span className=\"text-lg font-semibold\">9 years</span>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-lg\">Installation time</span>\n                <span className=\"text-lg font-semibold\">30Hour</span>\n              </div>\n            </div>\n\n            {/* Agreement Checkbox */}\n            <div className=\"flex items-center mb-6\">\n              <input\n                type=\"checkbox\"\n                id=\"agree\"\n                checked={agreed}\n                onChange={() => setAgreed(!agreed)}\n                className=\"mr-2\"\n                data-testid=\"checkbox-agree\"\n              />\n              <label htmlFor=\"agree\" className=\"text-sm text-gray-300 cursor-pointer\">\n                I confirm these simulation results and wish to proceed.\n              </label>\n            </div>\n            \n            {/* Buttons Row */}\n            <div className=\"flex items-center justify-between\">\n              <button \n                onClick={onPrevious}\n                className=\"text-white underline hover:no-underline transition-all duration-300\"\n                data-testid=\"button-previous\"\n              >\n                Previous\n              </button>\n              \n              <button \n                onClick={handleConfirm}\n                className={`bg-transparent border-2 border-white rounded-full px-8 py-3 flex items-center gap-3 transition-all duration-300 group\n                  ${agreed \n                    ? 'hover:bg-white hover:text-[#06141B] cursor-pointer' \n                    : 'opacity-50 cursor-not-allowed'\n                  }`}\n                data-testid=\"button-confirm\"\n                disabled={!agreed}\n              >\n                <span className=\"font-medium\">Confirm</span>\n                <ArrowRight className=\"w-5 h-5 group-hover:translate-x-1 transition-transform duration-300\" />\n              </button>\n            </div>\n          </div>\n        </div>\n\n        {/* Right Side - Recommendation Card */}\n        <div className=\"bg-transparent border-2 border-gray-600 rounded-2xl p-6 max-w-sm w-full\">\n          <div className=\"bg-gray-700 text-white text-sm px-3 py-1 rounded-md inline-block mb-4\">\n            Recommended\n          </div>\n          <h2 className=\"text-white text-xl font-bold mb-6\">\n            20.00kW Solar Power + 5kWh Storage\n          </h2>\n          <div className=\"space-y-2 mb-4\">\n            <p className=\"text-white font-medium\">\n              6% Offset + 1 Hours Avg Backup\n            </p>\n            <p className=\"text-gray-400 text-sm\">\n              Estimated System Size Based On Your Reported<br />\n              Electricity Use\n            </p>\n          </div>\n        </div>\n      </div>\n      \n      {/* Bottom Link */}\n      <div className=\"absolute bottom-8 left-1/2 transform -translate-x-1/2\">\n        <button \n          onClick={onBack}\n          className=\"text-white underline hover:no-underline transition-all duration-300\"\n          data-testid=\"button-back-to-main\"\n        >\n          Back to the main\n        </button>\n      </div>\n    </div>\n  );\n}","size_bytes":4724},"client/src/components/desktop/DesktopStep5.tsx":{"content":"import React from \"react\";\nimport { ArrowRight, Check } from \"lucide-react\";\n\ninterface DesktopStep5Props {\n  onRateExperience: () => void;\n  onBack: () => void;\n}\n\nexport function DesktopStep5({ onRateExperience, onBack }: DesktopStep5Props) {\n  return (\n    <div\n      className=\"min-h-screen flex flex-col justify-center items-center px-4\"\n      style={{ backgroundColor: \"#06141B\" }}\n    >\n      <div className=\"max-w-4xl w-full text-center\">\n        {/* Main Content */}\n        <div className=\"text-white\">\n          <h1 className=\"text-4xl lg:text-5xl font-bold mb-8\">All Done</h1>\n\n          {/* Checkmark Circle */}\n          <div className=\"w-20 h-20 bg-white rounded-full flex items-center justify-center mx-auto mb-8\">\n            <Check className=\"w-10 h-10 text-[#06141B]\" strokeWidth={3} />\n          </div>\n\n          {/* Success Message */}\n          <h2 className=\"text-2xl font-semibold mb-6\">\n            We'll be in touch shortly!\n          </h2>\n\n          <div className=\"max-w-md mx-auto mb-8 space-y-4\">\n            <p className=\"text-lg leading-relaxed opacity-90\">\n              Thank you for your patience, our pioneer energetics team will\n              contact you soon. You'll receive a WhatsApp message with your\n              personalized solar offer.\n            </p>\n\n            <p className=\"text-lg leading-relaxed opacity-90\">\n              <strong>\n                Together, we're building a brighter, greener Morocco.\n              </strong>\n            </p>\n          </div>\n\n          {/* Rate Experience Button */}\n          <button\n            onClick={onRateExperience}\n            className=\"bg-transparent border-2 border-white rounded-full px-8 py-3 flex items-center gap-3 hover:bg-white hover:text-[#06141B] transition-all duration-300 group mx-auto\"\n            data-testid=\"button-rate-experience\"\n          >\n            <span className=\"font-medium\">Rate Your Experience</span>\n            <ArrowRight className=\"w-5 h-5 group-hover:translate-x-1 transition-transform duration-300\" />\n          </button>\n        </div>\n      </div>\n\n      {/* Bottom Link */}\n      <div className=\"absolute bottom-8 left-1/2 transform -translate-x-1/2\">\n        <button\n          onClick={onBack}\n          className=\"text-white underline hover:no-underline transition-all duration-300\"\n          data-testid=\"button-back-to-main\"\n        >\n          Back to the main\n        </button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2455}},"version":1}