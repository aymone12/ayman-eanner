// MongoDB Schema for Solar Energy Calculator

// 1. Main Quotes Collection - Stores all quote requests and calculations
const quotesSchema = {
  _id: ObjectId,
  
  // Personal Information (from Image 2)
  personalInfo: {
    fullName: String,
    phoneNumber: String,
    homeAddress: String
  },
  
  // System Configuration (from Image 1)
  systemConfig: {
    gridType: {
      type: String,
      enum: ['tree_phase', 'single_phase'],
      required: true
    },
    installationType: {
      type: String,
      enum: ['ongrid', 'offgrid', 'hybrid'],
      required: true
    },
    electricBill: {
      type: Number,
      required: true,
      min: 0
    }
  },
  
  // Property Information (from Image 3)
  propertyInfo: {
    propertyType: String,
    humidityIndex: String,
    roofSunlightExposure: String
  },
  
  // Energy Storage Options (from Image 4)
  energyStorage: {
    storageMode: String,
    maintenanceService: String,
    backupHours: Number
  },
  
  // Simulation Results (from Image 5)
  simulationResults: {
    estimatedCost: {
      amount: Number,
      currency: {
        type: String,
        default: 'DH'
      }
    },
    annualSavings: {
      amount: Number,
      currency: {
        type: String,
        default: 'DH'
      }
    },
    paybackPeriod: {
      years: Number
    },
    installationTime: {
      hours: Number
    }
  },
  
  // Status and Tracking
  status: {
    type: String,
    enum: ['pending', 'confirmed', 'in_progress', 'completed', 'cancelled'],
    default: 'pending'
  },
  
  // Timestamps
  createdAt: {
    type: Date,
    default: Date.now
  },
  updatedAt: {
    type: Date,
    default: Date.now
  },
  
  // Optional: Customer communication preferences
  preferences: {
    contactMethod: {
      type: String,
      enum: ['phone', 'email', 'sms'],
      default: 'phone'
    },
    bestTimeToContact: String
  }
};

// 2. System Types Collection - Reference data for different solar system configurations
const systemTypesSchema = {
  _id: ObjectId,
  
  gridType: {
    type: String,
    enum: ['tree_phase', 'single_phase']
  },
  installationType: {
    type: String,
    enum: ['ongrid', 'offgrid', 'hybrid']
  },
  
  // Technical specifications
  specifications: {
    powerCapacity: String,
    efficiency: Number,
    warranty: String,
    components: [String]
  },
  
  // Pricing information
  pricing: {
    baseCost: Number,
    costPerKW: Number,
    maintenanceCostAnnual: Number
  },
  
  // Suitability criteria
  suitability: {
    minElectricBill: Number,
    maxElectricBill: Number,
    recommendedPropertyTypes: [String]
  },
  
  isActive: {
    type: Boolean,
    default: true
  }
};

// 3. Property Types Collection - Reference data for different property characteristics
const propertyTypesSchema = {
  _id: ObjectId,
  
  propertyType: String,
  
  characteristics: {
    typicalRoofSize: Number, // in square meters
    averagePowerConsumption: Number, // in kWh
    installationComplexity: {
      type: String,
      enum: ['low', 'medium', 'high']
    }
  },
  
  // Factors affecting solar efficiency
  solarFactors: {
    humidityImpact: Number, // coefficient
    sunlightOptimization: Number, // coefficient
    installationTimeMultiplier: Number
  }
};

// 4. Pricing Rules Collection - Dynamic pricing calculations
const pricingRulesSchema = {
  _id: ObjectId,
  
  ruleType: {
    type: String,
    enum: ['base_calculation', 'property_modifier', 'system_modifier', 'regional_modifier']
  },
  
  conditions: {
    electricBillRange: {
      min: Number,
      max: Number
    },
    propertyType: String,
    systemType: String,
    region: String
  },
  
  calculations: {
    costFormula: String, // e.g., "electricBill * 120 + baseCost"
    savingsFormula: String,
    paybackFormula: String,
    installationTimeFormula: String
  },
  
  isActive: Boolean,
  validFrom: Date,
  validUntil: Date
};

// 5. Installation Schedule Collection - Track installation appointments
const installationScheduleSchema = {
  _id: ObjectId,
  
  quoteId: {
    type: ObjectId,
    ref: 'quotes'
  },
  
  scheduledDate: Date,
  estimatedDuration: Number, // in hours
  
  team: {
    leadTechnician: String,
    teamMembers: [String],
    contactNumber: String
  },
  
  status: {
    type: String,
    enum: ['scheduled', 'in_progress', 'completed', 'rescheduled', 'cancelled']
  },
  
  notes: String,
  
  completionDetails: {
    actualDuration: Number,
    installedComponents: [String],
    testResults: String,
    customerSignoff: Boolean,
    photos: [String] // URLs to installation photos
  }
};

// MongoDB Indexes for optimal performance
const indexes = [
  // Quotes collection indexes
  { collection: 'quotes', index: { 'personalInfo.phoneNumber': 1 } },
  { collection: 'quotes', index: { 'status': 1 } },
  { collection: 'quotes', index: { 'createdAt': -1 } },
  { collection: 'quotes', index: { 'systemConfig.gridType': 1, 'systemConfig.installationType': 1 } },
  
  // System types collection indexes
  { collection: 'systemTypes', index: { 'gridType': 1, 'installationType': 1 } },
  { collection: 'systemTypes', index: { 'isActive': 1 } },
  
  // Property types collection indexes
  { collection: 'propertyTypes', index: { 'propertyType': 1 } },
  
  // Pricing rules collection indexes
  { collection: 'pricingRules', index: { 'ruleType': 1, 'isActive': 1 } },
  { collection: 'pricingRules', index: { 'validFrom': 1, 'validUntil': 1 } },
  
  // Installation schedule indexes
  { collection: 'installationSchedule', index: { 'quoteId': 1 } },
  { collection: 'installationSchedule', index: { 'scheduledDate': 1 } },
  { collection: 'installationSchedule', index: { 'status': 1 } }
];

// Example MongoDB Operations

// 1. Create a new quote
async function createQuote(quoteData) {
  const quote = {
    personalInfo: quoteData.personalInfo,
    systemConfig: quoteData.systemConfig,
    propertyInfo: quoteData.propertyInfo,
    energyStorage: quoteData.energyStorage,
    simulationResults: calculateSimulation(quoteData),
    status: 'pending',
    createdAt: new Date(),
    updatedAt: new Date()
  };
  
  return await db.quotes.insertOne(quote);
}

// 2. Calculate simulation results
function calculateSimulation(data) {
  const { electricBill, gridType, installationType } = data.systemConfig;
  
  // Sample calculation logic (replace with your actual formulas)
  const estimatedCost = electricBill * 120; // DH per monthly bill
  const annualSavings = electricBill * 12 * 0.8; // 80% savings
  const paybackPeriod = estimatedCost / annualSavings;
  const installationTime = installationType === 'hybrid' ? 40 : 
                          installationType === 'offgrid' ? 35 : 30;
  
  return {
    estimatedCost: { amount: estimatedCost, currency: 'DH' },
    annualSavings: { amount: annualSavings, currency: 'DH' },
    paybackPeriod: { years: Math.ceil(paybackPeriod) },
    installationTime: { hours: installationTime }
  };
}

// 3. Find quotes with filters
async function findQuotes(filters = {}) {
  const query = {};
  
  if (filters.status) query.status = filters.status;
  if (filters.gridType) query['systemConfig.gridType'] = filters.gridType;
  if (filters.dateFrom) query.createdAt = { $gte: new Date(filters.dateFrom) };
  
  return await db.quotes.find(query)
    .sort({ createdAt: -1 })
    .limit(filters.limit || 50);
}

// 4. Update quote status
async function updateQuoteStatus(quoteId, newStatus) {
  return await db.quotes.updateOne(
    { _id: ObjectId(quoteId) },
    { 
      $set: { 
        status: newStatus,
        updatedAt: new Date()
      }
    }
  );
}

// 5. Get system recommendations
async function getSystemRecommendations(electricBill, propertyType) {
  return await db.systemTypes.find({
    'suitability.minElectricBill': { $lte: electricBill },
    'suitability.maxElectricBill': { $gte: electricBill },
    'suitability.recommendedPropertyTypes': propertyType,
    isActive: true
  }).sort({ 'pricing.baseCost': 1 });
}

module.exports = {
  quotesSchema,
  systemTypesSchema,
  propertyTypesSchema,
  pricingRulesSchema,
  installationScheduleSchema,
  indexes,
  createQuote,
  findQuotes,
  updateQuoteStatus,
  getSystemRecommendations
};