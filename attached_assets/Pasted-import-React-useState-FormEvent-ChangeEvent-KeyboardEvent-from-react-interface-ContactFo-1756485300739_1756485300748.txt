import React, { useState, FormEvent, ChangeEvent, KeyboardEvent } from 'react';

interface ContactFormData {
  email: string;
}

interface ButtonState {
  text: string;
  disabled: boolean;
}

const ContactSection: React.FC = () => {
  const [formData, setFormData] = useState<ContactFormData>({ email: '' });
  const [buttonState, setButtonState] = useState<ButtonState>({ 
    text: 'Get started', 
    disabled: false 
  });
  const [emailError, setEmailError] = useState<boolean>(false);

  const isValidEmail = (email: string): boolean => {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
  };

  const handleEmailChange = (e: ChangeEvent<HTMLInputElement>): void => {
    setFormData({ email: e.target.value });
    if (emailError) {
      setEmailError(false);
    }
  };

  const handleSubmit = (e: FormEvent): void => {
    e.preventDefault();
    const email = formData.email.trim();

    if (email && isValidEmail(email)) {
      // Simulate form submission
      setButtonState({ text: 'Submitting...', disabled: true });

      setTimeout(() => {
        setButtonState({ text: 'Thank you!', disabled: true });
        setFormData({ email: '' });

        setTimeout(() => {
          setButtonState({ text: 'Get started', disabled: false });
        }, 2000);
      }, 1000);
    } else {
      setEmailError(true);
      setTimeout(() => {
        setEmailError(false);
      }, 2000);
    }
  };

  const handleKeyPress = (e: KeyboardEvent<HTMLInputElement>): void => {
    if (e.key === 'Enter') {
      handleSubmit(e as any);
    }
  };

  return (
    <div className="min-h-screen flex justify-center items-center p-5" style={{ backgroundColor: '#f8f9fa' }}>
      <div 
        className="bg-white rounded-3xl max-w-6xl w-full flex justify-between items-center shadow-sm"
        style={{ 
          border: '1.5px solid #e1e5e9',
          padding: '60px 80px'
        }}
      >
        <div className="flex-1 pr-16">
          <div 
            className="text-base font-medium mb-4 tracking-wide"
            style={{ color: '#6b7280' }}
          >
            Contact us today!
          </div>
          <h2 
            className="text-5xl font-semibold leading-tight"
            style={{ 
              color: '#1f2937',
              fontSize: '42px',
              lineHeight: '1.2'
            }}
          >
            Have questions about our services or ready to start your project?
          </h2>
        </div>
        
        <div className="flex flex-col gap-4" style={{ flex: '0 0 400px' }}>
          <input
            type="email"
            value={formData.email}
            onChange={handleEmailChange}
            onKeyPress={handleKeyPress}
            placeholder="Type your email"
            className="w-full px-6 py-5 text-base font-normal bg-white rounded-xl outline-none transition-all duration-200"
            style={{
              border: emailError ? '2px solid #ef4444' : '2px solid #e5e7eb',
              color: '#374151',
              boxShadow: emailError ? 'none' : undefined
            }}
            onFocus={(e) => {
              e.target.style.borderColor = '#3b82f6';
              e.target.style.boxShadow = '0 0 0 3px rgba(59, 130, 246, 0.1)';
            }}
            onBlur={(e) => {
              if (!emailError) {
                e.target.style.borderColor = '#e5e7eb';
                e.target.style.boxShadow = 'none';
              }
            }}
            required
          />
          <button
            onClick={handleSubmit}
            disabled={buttonState.disabled}
            className="w-full px-6 py-5 text-white text-base font-semibold rounded-xl cursor-pointer outline-none transition-all duration-200 hover:transform hover:-translate-y-px active:translate-y-0"
            style={{
              backgroundColor: buttonState.disabled ? '#374151' : '#374151',
              border: 'none'
            }}
            onMouseEnter={(e) => {
              if (!buttonState.disabled) {
                (e.target as HTMLButtonElement).style.backgroundColor = '#1f2937';
              }
            }}
            onMouseLeave={(e) => {
              (e.target as HTMLButtonElement).style.backgroundColor = '#374151';
            }}
          >
            {buttonState.text}
          </button>
        </div>
      </div>

      <style jsx>{`
        @media (max-width: 768px) {
          .contact-container {
            flex-direction: column !important;
            padding: 40px 30px !important;
            text-align: center;
          }
          
          .contact-content {
            padding-right: 0 !important;
            margin-bottom: 40px;
          }
          
          .contact-heading {
            font-size: 32px !important;
          }
          
          .contact-form {
            flex: none !important;
            width: 100% !important;
            max-width: 400px;
          }
        }

        @media (max-width: 480px) {
          .contact-container {
            padding: 30px 20px !important;
            margin: 20px;
          }
          
          .contact-heading {
            font-size: 28px !important;
          }
          
          .contact-tagline {
            font-size: 14px !important;
          }
        }

        input::placeholder {
          color: #9ca3af;
          font-weight: 400;
        }
      `}</style>
    </div>
  );
};

export default ContactSection;





